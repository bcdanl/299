---
title: Lecture 9
subtitle: "`pandas` - Adding, Removing, & Renaming Variables; Data Types"
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    incremental: true
    code-annotations: hover
    scrollable: false

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2025-09-29
execute: 
  eval: true
  echo: true
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---


```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)


theme_set(theme_fivethirtyeight()+
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.5)),
                axis.text.y = element_text(size = rel(1.5)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )
```


## `nba` DataFrame
:::{.nonincremental}
- Let's read the **nba.csv** file as `nba`:

:::

```{.python}
# Below is to import the pandas library as pd
import pandas as pd 

# Below is for an interactive display of DataFrame in Colab
from google.colab import data_table  
data_table.enable_dataframe_formatter()

# Below is to read nba.csv as nba DataFrame
nba = pd.read_csv("https://bcdanl.github.io/data/nba.csv",
                  parse_dates = ["Birthday"])

```



# **Mathematical & Vectorized Operations**  {background-color="#1c4982"}


## Mathematical Operations

```{.python}
nba.max()
nba.min()
```
- The `max()` method returns a `Series` with the maximum value from each variable.
- The `min()` method returns a `Series` with the minimum value from each variable.


## Mathematical Operations

:::: {.columns}

::: {.column width="45%"}
```{.python}
nba.sum()
nba.mean()
nba.median()
nba.quantile(0.75) # 0 to 1
nba.std()
```
:::

::: {.column width="55%"}
```{.python}
nba.sum(numeric_only = True)
nba.mean(numeric_only = True)
nba.median(numeric_only = True)
nba.quantile(0.75, numeric_only=True)
nba.std(numeric_only = True)
```
:::

::::

- The `sum()`/`mean()`/`median()` method returns a `Series` with the sum/mean/median of the values in each variable.
- The `quantile()` method returns a `Series` with the percentile value of the values in each variable (e.g., 25th, 75th, 90th percentile).
- The `std()` method returns a `Series` with the standard deviation of the values in each variable.
- To limit the operation to numeric volumes, we can pass `True` to the `sum()`/`mean()`/`median()`/`std()` method’s `numeric_only` parameter.





## Vectorized Operations

```{.python}
nba["Salary_2x"] = nba["Salary"] + nba["Salary"]
nba["Name_w_Position"] = nba["Name"] + " (" + nba["Position"] + ")"
nba["Salary_minus_Mean"] = nba["Salary"] - nba["Salary"].mean()
```

- `pandas` performs a *vectorized operation* on `Series` or a variable in `DataFrame`.
  - This means an element-by-element operation.
  - This enables us to apply functions and perform operations on the data efficiently, without the need for explicit loops.




# **Adding, Removing, and Renaming Variables** {background-color="#1c4982"}



## Adding and Removing Variables

::: {.nonincremental}

- Here we use `[]` to add variables:


```{.python}
nba['Salary_k'] = nba['Salary'] / 1000
nba['Salary_2x'] = nba['Salary'] + nba['Salary']
nba['Salary_3x'] = nba['Salary'] * 3
```

:::



## Removing Variables with `drop(columns = ... )`

::: {.nonincremental}

- We can use `.drop(columns = ...)` to drop variables:


```{.python}
nba.drop(columns = "Salary_k")
nba.drop(columns = ["Salary_2x", "Salary_3x"])
```

:::




## Renaming Variables with `nba.columns`


:::{.nonincremental}

- Do you recall the `.columns` attribute? 

```{.python}
nba.columns
```

- We can rename any or all of a DataFrame’s columns by assigning a *list* of new names to the attribute:

```{.python}
nba.columns = ["Team", "Position", "Date of Birth", "Income"]
```

:::


## Renaming Variables with `rename( columns = { "Existing One" : "New One" } )`


```{.python}
nba.rename( columns = { "Date of Birth": "Birthday" } )
```

- The above `rename()` method renames the variable *Date of Birth* to *Birthday*.



## Renaming rows with `rename( index = { "Existing One" : "New One" } )`

```{.python}
nba = nba.rename(
    index = { "LeBron James": "LeBron Raymone James" }
)
```

- The above `rename()` method renames the observation *LeBron James* to *LeBron Raymone James*.



<!-- ## Relocating Variables with `.columns.get_loc()`, `.pop()`, and `.insert()` -->

<!-- ```{.python} -->
<!-- ref_var = nba.columns.get_loc('Team')  -->
<!-- var_to_move = nba.pop('Salary') -->
<!-- nba.insert(ref_var, 'Salary', var_to_move) # insert() directly alters 'nba' -->
<!-- ``` -->

<!-- - **Step 1**. `DataFrame.columns.get_loc('Reference_Var')` -->
<!--   - Get the integer position (right before the reference variable, 'Reference_Var') -->
<!-- - **Step 2**. `DataFrame.pop('Some_Var_To_Move')` -->
<!--   - Remove the variable we want to relocate from the DataFrame and store it in a `Series` -->
<!-- - **Step 3**. `DataFrame.insert(ref_var, 'Some_Var_To_Move', var_to_move)` -->
<!--   - Insert the variable back into the DataFrame right after the reference variable. -->



# **Converting Data Types with the `astype()` Method** {background-color="#1c4982"}


## Converting Data Types with the `astype()` Method
:::{.nonincremental}
- Let's read `employment.csv` as `emp`.

```{.python}
import pandas as pd
# Below is for an interactive display of DataFrame in Colab
from google.colab import data_table
data_table.enable_dataframe_formatter()

emp = pd.read_csv("https://bcdanl.github.io/data/employment.csv")
```


:::


## Converting Data Types with the `astype()` method

::: {.nonincremental}

- What values are in the `Mgmt` variable?

:::

```{.python}
emp["Mgmt"].astype(bool)
```


- The `astype()` method converts a `Series`' values to a different data type. 
  - It can accept a single argument: the new data type. 



## Converting Data Types with the `astype()` method

```{.python}
emp["Mgmt"] = emp["Mgmt"].astype(bool)
```

- The above code overwrites the `Mgmt` variable with our new `Series` of Booleans.




## Converting Data Types with the `astype()` method

```{.python}
emp["Salary"].astype(int)
```

- The above code tries to coerce the `Salary` variable's values to integers with the `astype()` method.
  - Pandas is unable to convert the `NaN` values to integers.



## Fill Missing Values with the `fillna()` method

```{.python}
emp["Salary"].fillna(0)
```

- The `fillna()` method replaces a `Series`' missing values with the argument we pass in. 
- The above example provides a fill value of `0`. 
  - Note that our choice of value can distort the data; `0` is passed solely for the sake of example.





## Converting Data Types with the `astype()` method

```{.python}
emp["Salary"] = emp["Salary"].fillna(0).astype(int)
```

- The above code overwrites the `Salary` variable with our new `Series` of integers.




## Converting Data Types with the `astype()` method

```{.python}
emp["Gender"] = emp["Gender"].astype("category")
```

- Pandas includes a special data type called a `category`, 
  - It is ideal for a variable consisting of a small number of unique values relative to its total number of values. 
  - E.g., gender, weekdays, blood types, planets, and income groups. 



## Converting Data Types with the `pd.to_datetime()` method

```{.python}
# Below two are equivalent:
emp["Start Date"] = pd.to_datetime(emp["Start Date"])
emp["Start Date"] = emp["Start Date"].astype('datetime64[ns]')
```

- The `pd.to_datetime()` function is used to convert a `Series`, `DataFrame`, or a single variable of a `DataFrame` from its current data type into `datetime` format. 



## Converting Data Types with the `astype()` method

```{.python}
emp = pd.read_csv("https://bcdanl.github.io/data/employment.csv")

emp["Salary"] = emp["Salary"].fillna(0)
emp = emp.astype({'Mgmt': 'bool', 
                  'Salary': 'int',
                  'Gender': 'category',
                  'Start Date': 'datetime64[ns]',
                  'Team': 'category'})
```

- We can provide a dictionary of variable-type pairs to `astype()`.


## Pandas Basics

Let's do Question 1 in [**Classwork 6**](https://bcdanl.github.io/210/danl-cw/danl-210-cw-06.html)!



