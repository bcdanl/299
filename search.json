[
  {
    "objectID": "listing-danl-299-lec.html",
    "href": "listing-danl-299-lec.html",
    "title": "DANL 299 - Lecture",
    "section": "",
    "text": "Title\n\n\nSubtitle\n\n\nDate\n\n\n\n\n\n\nLecture 1\n\n\nSyllabus and Course Outline\n\n\nAugust 25, 2025\n\n\n\n\nLecture 2\n\n\nPrologue; DANL Tools; Building a Website; Markdown\n\n\nAugust 27, 2025\n\n\n\n\nLecture 3\n\n\nGetting Started with Jupyter Notebook and Quarto\n\n\nSeptember 4, 2025\n\n\n\n\nLecture 4\n\n\nPy Basics - Variables, Data Types, Operators, Casting, Containers\n\n\nSeptember 8, 2025\n\n\n\n\nLecture 5\n\n\nPy Basics - if-else; Slicing; Functions; while & for; List & Dict; try-except\n\n\nSeptember 10, 2025\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "listing-danl-299-wk.html",
    "href": "listing-danl-299-wk.html",
    "title": "Weeks",
    "section": "",
    "text": "Title\n\n\nSubtitle\n\n\nDate\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "danl-wk/wk-03.html",
    "href": "danl-wk/wk-03.html",
    "title": "Week 3",
    "section": "",
    "text": "In our week 3, we will start practicing Python basics"
  },
  {
    "objectID": "danl-wk/wk-03.html#lecture-slides",
    "href": "danl-wk/wk-03.html#lecture-slides",
    "title": "Week 3",
    "section": "üè´ Lecture Slides",
    "text": "üè´ Lecture Slides\n\nLecture 4 ‚Äî Python Basics I\nView Slides\n\nLecture 5 ‚Äî Python Basics II\nView Slides\n\nüé• Looking for lecture recordings? You can only find those on Brightspace."
  },
  {
    "objectID": "danl-wk/wk-03.html#classwork",
    "href": "danl-wk/wk-03.html#classwork",
    "title": "Week 3",
    "section": "‚úçÔ∏è Classwork",
    "text": "‚úçÔ∏è Classwork\nüöß Please complete Classwork 4 to practice basics in Python programming."
  },
  {
    "objectID": "danl-wk/wk-03.html#recommended-reading",
    "href": "danl-wk/wk-03.html#recommended-reading",
    "title": "Week 3",
    "section": "üìö Recommended Reading",
    "text": "üìö Recommended Reading\n\nCheck the end of slides for the list of references cited in the lecture."
  },
  {
    "objectID": "danl-wk/wk-03.html#discussion",
    "href": "danl-wk/wk-03.html#discussion",
    "title": "Week 3",
    "section": "üí¨ Discussion",
    "text": "üí¨ Discussion\nWelcome to our Week 3 Discussion Board! üëã \nThis space is designed for you to engage with your classmates about the material covered in Week 3.\nWhether you are looking to delve deeper into the content, share insights, or have questions about the content, this is the perfect place for you.\nIf you have any specific questions for Byeong-Hak (@bcdanl) or peer classmate (@GitHub-Username) regarding the Week 1 materials or need clarification on any points, don‚Äôt hesitate to ask here.\nLet‚Äôs collaborate and learn from each other!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DANL 299: Data Preparation and Management, Fall 2025",
    "section": "",
    "text": "Welcome! üëã\n\\(-\\) Explore, Learn, and Grow with Data Analytics! üåü"
  },
  {
    "objectID": "index.html#bullet-lecture",
    "href": "index.html#bullet-lecture",
    "title": "DANL 299: Data Preparation and Management, Fall 2025",
    "section": "\\(\\bullet\\,\\) üöÄ Lecture",
    "text": "\\(\\bullet\\,\\) üöÄ Lecture\n\n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\nDate\n\n\n\n\n\n\nLecture 1\n\n\nSyllabus and Course Outline\n\n\nAugust 25, 2025\n\n\n\n\nLecture 2\n\n\nPrologue; DANL Tools; Building a Website; Markdown\n\n\nAugust 27, 2025\n\n\n\n\nLecture 3\n\n\nGetting Started with Jupyter Notebook and Quarto\n\n\nSeptember 4, 2025\n\n\n\n\nLecture 4\n\n\nPy Basics - Variables, Data Types, Operators, Casting, Containers\n\n\nSeptember 8, 2025\n\n\n\n\nLecture 5\n\n\nPy Basics - if-else; Slicing; Functions; while & for; List & Dict; try-except\n\n\nSeptember 10, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#bullet-classwork",
    "href": "index.html#bullet-classwork",
    "title": "DANL 299: Data Preparation and Management, Fall 2025",
    "section": "\\(\\bullet\\,\\) ‚å®Ô∏è Classwork",
    "text": "\\(\\bullet\\,\\) ‚å®Ô∏è Classwork\n\n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\nDate\n\n\n\n\n\n\nClasswork 1\n\n\nBuilding a Personal Website using Git, GitHub, and RStudio with Quarto\n\n\nAugust 25, 2025\n\n\n\n\nClasswork 2\n\n\nMarkdown Basics\n\n\nAugust 27, 2025\n\n\n\n\nClasswork 3\n\n\nQuarto Website Basics\n\n\nSeptember 4, 2025\n\n\n\n\nClasswork 4\n\n\nPython Basics\n\n\nSeptember 8, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#bullet-homework",
    "href": "index.html#bullet-homework",
    "title": "DANL 299: Data Preparation and Management, Fall 2025",
    "section": "\\(\\bullet\\,\\) üíª Homework",
    "text": "\\(\\bullet\\,\\) üíª Homework\n\n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\nDate\n\n\n\n\n\n\nHomework 1\n\n\nPersonal Website and Python Basics\n\n\nSeptember 11, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "danl-cw/danl-299-cw-03.html",
    "href": "danl-cw/danl-299-cw-03.html",
    "title": "Classwork 3",
    "section": "",
    "text": "_quarto.yml configures the website:\n\nIt determines the structure of the website.\n\ne.g., Navigation bar, themes, HTML options, etc.\n\nIf _quarto.yml is edited, use quarto render to render all qmd and ipynb files.\n\nindex.qmd renders index.html, the front page of the website.\n\nDo not create Quarto files something like index2.qmd within the working directory.\n\nblog-listing.qmd configures the blog listing page.\nposts directory includes sub-directories of blog posts.\nimg directory can be used to store picture files.\n\n\n\n\nA file in the working directory can have its own web address.\n\nFor example, if you have resume-example.pdf in your working directory, it has the web address, https://USERNAME.github.io/resume-example.pdf.\n\nWhen naming a file in the website, do not have any space in a file name!\nBe systematic when naming a series of files in the website.\n\nE.g., danl-210-cw-01.ipynb, danl-210-cw-02.ipynb, danl-210-cw-03.ipynb.\n\n\n\n\n\n\n\nRules\n\nOne blog post corresponds to:\n\n\nOne sub-directory in the posts directory.\nOne *.ipynb (or *.qmd) file.\n\n\nPut all files for one blog post (e.g., *.ipynb (or *.qmd), *.png) in one corresponding sub-directory in the posts directory.\nWhen inserting an image file to a blog post, use a relative path, i.e., a file name of the image file.\n\n\n\n\n\n\n\nDecorate your website:\n\n\nReplace YOUR NAME with your name in _quarto.yml and index.qmd.\nDescribe yourself in index.qmd.\nAdd the picture (png) file of your profile photo to img directory. Then correct img/profile.png in index.qmd accordingly.\nCorrect links for your resum√©, linkedin, email, and social media.\n\n\nAdd a menu of ‚ÄúProject‚Äù to the navigation bar using danl_proj_nba.ipynb.\nAdd a drop-down menu of ‚ÄúPython Data Analysis‚Äù to the navigation bar.\n\n\nUnder the menu of ‚ÄúPython Data Analysis‚Äù, add links for the following webpage:\n\nPandas Basics using pandas_basic.ipynb\nSeaborn Basics using seaborn_basic.ipynb\n\n\n\nUse the 3-step git commands (git add, git commit, and git push) to update your website.\n\n\n\n\n\n\nQuarto - Creating a Website\nQuarto - HTML Basics\nQuarto - HTML Code Blocks\nQuarto - HTML Theming\nQuarto - Creating a Blog"
  },
  {
    "objectID": "danl-cw/danl-299-cw-03.html#website-files",
    "href": "danl-cw/danl-299-cw-03.html#website-files",
    "title": "Classwork 3",
    "section": "",
    "text": "_quarto.yml configures the website:\n\nIt determines the structure of the website.\n\ne.g., Navigation bar, themes, HTML options, etc.\n\nIf _quarto.yml is edited, use quarto render to render all qmd and ipynb files.\n\nindex.qmd renders index.html, the front page of the website.\n\nDo not create Quarto files something like index2.qmd within the working directory.\n\nblog-listing.qmd configures the blog listing page.\nposts directory includes sub-directories of blog posts.\nimg directory can be used to store picture files.\n\n\n\n\nA file in the working directory can have its own web address.\n\nFor example, if you have resume-example.pdf in your working directory, it has the web address, https://USERNAME.github.io/resume-example.pdf.\n\nWhen naming a file in the website, do not have any space in a file name!\nBe systematic when naming a series of files in the website.\n\nE.g., danl-210-cw-01.ipynb, danl-210-cw-02.ipynb, danl-210-cw-03.ipynb."
  },
  {
    "objectID": "danl-cw/danl-299-cw-03.html#blogging",
    "href": "danl-cw/danl-299-cw-03.html#blogging",
    "title": "Classwork 3",
    "section": "",
    "text": "Rules\n\nOne blog post corresponds to:\n\n\nOne sub-directory in the posts directory.\nOne *.ipynb (or *.qmd) file.\n\n\nPut all files for one blog post (e.g., *.ipynb (or *.qmd), *.png) in one corresponding sub-directory in the posts directory.\nWhen inserting an image file to a blog post, use a relative path, i.e., a file name of the image file."
  },
  {
    "objectID": "danl-cw/danl-299-cw-03.html#practice-problems",
    "href": "danl-cw/danl-299-cw-03.html#practice-problems",
    "title": "Classwork 3",
    "section": "",
    "text": "Decorate your website:\n\n\nReplace YOUR NAME with your name in _quarto.yml and index.qmd.\nDescribe yourself in index.qmd.\nAdd the picture (png) file of your profile photo to img directory. Then correct img/profile.png in index.qmd accordingly.\nCorrect links for your resum√©, linkedin, email, and social media.\n\n\nAdd a menu of ‚ÄúProject‚Äù to the navigation bar using danl_proj_nba.ipynb.\nAdd a drop-down menu of ‚ÄúPython Data Analysis‚Äù to the navigation bar.\n\n\nUnder the menu of ‚ÄúPython Data Analysis‚Äù, add links for the following webpage:\n\nPandas Basics using pandas_basic.ipynb\nSeaborn Basics using seaborn_basic.ipynb\n\n\n\nUse the 3-step git commands (git add, git commit, and git push) to update your website."
  },
  {
    "objectID": "danl-cw/danl-299-cw-03.html#references",
    "href": "danl-cw/danl-299-cw-03.html#references",
    "title": "Classwork 3",
    "section": "",
    "text": "Quarto - Creating a Website\nQuarto - HTML Basics\nQuarto - HTML Code Blocks\nQuarto - HTML Theming\nQuarto - Creating a Blog"
  },
  {
    "objectID": "danl-cw/danl-299-cw-04.html",
    "href": "danl-cw/danl-299-cw-04.html",
    "title": "Classwork 4",
    "section": "",
    "text": "Using Python operations only, calculate below: \\[\\frac{2^5}{7 \\cdot (4 - 2^3)}\\]\nAnswer"
  },
  {
    "objectID": "danl-cw/danl-299-cw-04.html#question-1",
    "href": "danl-cw/danl-299-cw-04.html#question-1",
    "title": "Classwork 4",
    "section": "",
    "text": "Using Python operations only, calculate below: \\[\\frac{2^5}{7 \\cdot (4 - 2^3)}\\]\nAnswer"
  },
  {
    "objectID": "danl-cw/danl-299-cw-04.html#question-2",
    "href": "danl-cw/danl-299-cw-04.html#question-2",
    "title": "Classwork 4",
    "section": "Question 2",
    "text": "Question 2\nFor each expression below, what is the value of the expression? Explain thoroughly.\n\n20 == '20'\n\n\nx = 4.0\ny = .5\n\nx &lt; y or 3*y &lt; x\n\nAnswer"
  },
  {
    "objectID": "danl-cw/danl-299-cw-04.html#question-3",
    "href": "danl-cw/danl-299-cw-04.html#question-3",
    "title": "Classwork 4",
    "section": "Question 3",
    "text": "Question 3\n\nfare = \"$10.00\"\ntip = \"2.00$\"\ntax = \"$ 0.80\"\n\nWrite a Python code that uses slicing and the print() function to print out the following message:\n\nThe total trip cost is: $12.80\n\n\nAnswer"
  },
  {
    "objectID": "danl-cw/danl-299-cw-04.html#question-4",
    "href": "danl-cw/danl-299-cw-04.html#question-4",
    "title": "Classwork 4",
    "section": "Question 4",
    "text": "Question 4\n\nlist_variable = [100, 144, 169, 1000, 8]\n\nWrite a Python code that uses print() and max() functions to print out the largest value in the list, list_variable, as follows:\n\nThe largest value in the list is: 1000\n\n\nAnswer"
  },
  {
    "objectID": "danl-cw/danl-299-cw-04.html#question-5",
    "href": "danl-cw/danl-299-cw-04.html#question-5",
    "title": "Classwork 4",
    "section": "Question 5",
    "text": "Question 5\n\nvals = [3, 2, 1, 0]\n\n\nUse a while loop to print each value of the list [3, 2, 1, 0], one at a time.\nUse a for loop to print each value of the list [3, 2, 1, 0], one at a time.\n\n\nAnswer"
  },
  {
    "objectID": "danl-cw/danl-299-cw-04.html#question-6",
    "href": "danl-cw/danl-299-cw-04.html#question-6",
    "title": "Classwork 4",
    "section": "Question 6",
    "text": "Question 6\n\nAssign the value 7 to the variable guess_me, and the value 1 to the variable number.\nWrite a while loop that compares number with guess_me.\n\nPrint ‚Äòtoo low‚Äô if number is less than guess me.\nIf number equals guess_me, print ‚Äòfound it!‚Äô and then exit the loop.\nIf number is greater than guess_me, print ‚Äòoops‚Äô and then exit the loop.\nIncrement number at the end of the loop.\n\nWrite a for loop that compares number with guess_me.\n\nPrint ‚Äòtoo low‚Äô if number is less than guess me.\nIf number equals guess_me, print ‚Äòfound it!‚Äô and then exit the loop.\nIf number is greater than guess_me, print ‚Äòoops‚Äô and then exit the loop.\nIncrement number at the end of the loop.\n\n\n\nAnswer"
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#instructor-1",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#instructor-1",
    "title": "Lecture 1",
    "section": "Instructor",
    "text": "Instructor\nCurrent Appointment & Education\n\nName: Byeong-Hak Choe.\nAssistant Professor of Data Analytics and Economics, School of Business at SUNY Geneseo.\nPh.D.¬†in Economics from University of Wyoming.\nM.S. in Economics from Arizona State University.\nM.A.¬†in Economics from SUNY Stony Brook.\nB.A. in Economics & B.S. in Applied Mathematics from Hanyang University at Ansan, South Korea.\n\nMinor in Business Administration.\nConcentration in Finance."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#instructor-2",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#instructor-2",
    "title": "Lecture 1",
    "section": "Instructor",
    "text": "Instructor\nEconomics and Data Science\n\nChoe, B.H., 2021. ‚ÄúSocial Media Campaigns, Lobbying and Legislation: Evidence from #climatechange and Energy Lobbies.‚Äù\nQuestion: To what extent do social media campaigns compete with fossil fuel lobbying on climate change legislation?\nData include:\n\n5.0 million tweets with #climatechange/#globalwarming around the globe;\n12.0 million retweets/likes to those tweets;\n0.8 million Twitter users who wrote those tweets;\n1.4 million Twitter users who retweeted or liked those tweets;\n0.3 million US Twitter users with their location at a city level;\nFirm-level lobbying data (expenses, targeted bills, etc.)."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#instructor-3",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#instructor-3",
    "title": "Lecture 1",
    "section": "Instructor",
    "text": "Instructor\nEconomics and Data Science\n\nChoe, B.H. and Ore-Monago, T., 2024. ‚ÄúGovernance and Climate Finance in the Developing World‚Äù\nClimate finance refers to the financial resources allocated for mitigating and adapting to climate change, including support for initiatives that reduce greenhouse gas emissions and enhance resilience to climate impacts.\n\nWe focus on transnational financing that rich countries provide poor countries with financial resources, in order to help them adapt to climate change and mitigate greenhouse gas (GHG) emissions.\nSince the GHG emissions in developing countries are rapidly growing, it is crucial to assess the effectiveness of climate finance.\nPoor governance (e.g., legal system, rule of law, and accountability) can be significant barriers to emissions reductions."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#instructor-4",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#instructor-4",
    "title": "Lecture 1",
    "section": "Instructor",
    "text": "Instructor\nEconomics and Data Science\n\nChoe, B.H. and Newbold, Steve, ‚ÄúEstimating the Value of Statistical Life (VSL) through Big Data‚Äù\nVSL is the monetary value associated with reducing the risk of death.\n\nHow much value would that be? How can we measure it?\nHow do government agencies use the VSL to decide which policies are worth the cost when they reduce the risk of death?"
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-1",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-1",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nEmail, Class & Office Hours\n\nEmail: bchoe@geneseo.edu\nClass Homepage:\n\nGitHub Course Website\nBrightspace Course Shell\n\nOffice: South Hall 227B\nOffice Hours:\n\nMondays and Wednesdays 3:30 P.M.‚Äì5:00 P.M.\nBy appointment via email."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-2",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-2",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nCourse Description\n\nThis course is designed to provide a comprehensive overview of data handling techniques, focusing on practical application through case studies.\nKey topics include:\n\ndata loading, cleaning, transformation, merging, and reshaping;\ntechniques for slicing, dicing, and summarizing datasets;\ndata collection via web scraping and APIs.\n\nThese areas will be explored through detailed, real-world examples to address common data analysis challenges.\nThroughout the course, students will gain hands-on experience with Python and its data analysis libraries, along with practical applications of git and GitHub."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-3",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-3",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nReference Materials\n\nPython for Data Analysis (3rd Edition) by Wes McKinney\n\nA free online version of this book is available.\n\nPython Programming for Data Science by Tomas Beuzen\nCoding for Economists by Arthur Turrell\nPython for Econometrics in Economics by Fabian H. C. Raters\nQuantEcon DataScience - Python Fundamentals by Chase Coleman, Spencer Lyon, and Jesse Perla\nQuantEcon DataScience - pandas by Chase Coleman, Spencer Lyon, and Jesse Perla\nGuide for Quarto"
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-4",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-4",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nCourse Requirements\n\nLaptop: You should bring your own laptop (Mac or Windows) to the classroom.\n\nThe minimum specification for your laptop in this course is 2+ core CPU, 4+ GB RAM, and 500+ GB disk storage.\n\nHomework: There will be six homework assignments.\nProject: There will be one project on a personal website.\nExams: There will be two Midterm Exams and one Final Exam.\n\nThe Midterm Exam 2 is comprehensive.\nThe Final Exam is comprehensive.\n\nDiscussions: You are encouraged to participate in GitHub-based online discussions and class discussion, and office hours.\n\nCheckout the netiquette policy in the syllabus."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-5",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-5",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nPersonal Website\n\nYou will create your own website using Quarto, R Studio, and Git.\nYou will publish your homework assignments and a project on your website.\nYour website will be hosted in GitHub.\nThe basics in Markdown will be discussed.\nReferences:\n\nQuarto Guide"
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-6",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-6",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nWhy Personal Website?\n\n\nHere is the example website:\n\nDANL Website Template\n\nProfessional Showcase: Display skills and projects\nVisibility and Networking: Increase online presence\nContent Sharing and Engagement: Publish articles, insights\nJob Opportunities: Attract potential employers and clients\nLong-term Asset: A growing repository of your career journey"
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-7",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-7",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nProject\n\nThe project report should include data collection and exploratory data analysis using summary statistics, visual representations, and data wrangling.\nThe document for the project must be published in each member‚Äôs website."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-8",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-8",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nClass Schedule and Exams\n\nThere will be tentatively 28 class sessions.\nThe Midterm Exam I is scheduled on October 8, 2025, Wednesday, during the class time.\nThe Midterm Exam II is scheduled on November 12, 2025, Wednesday, during the class time.\nThe Final Exam is to be determined.\nThe due for the project is December 16, 2025, Tuesday, 11:59 P.M., Eastern Time"
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-9",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-9",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nClass Schedule and Exams\n\nNo class on\n\nSeptember 1 (Labor Day)\nOctober 13 (Fall Break)\nNovember 26 (Thanksgiving Break)"
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-10",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-10",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nCourse Contents\n\n\n\n\n\n\n\n\nThe first part of the course covers Python basics and pandas basics."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-11",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-11",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nCourse Contents\n\n\n\n\n\n\n\n\nThe second part of the course covers data collection."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-12",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-12",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nCourse Contents\n\n\n\n\n\n\n\n\nThe third part of the course covers advanced pandas."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-13",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-13",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nGrading\n\\[\n\\begin{align}\n(\\text{Total Percentage Grade}) =&\\quad\\;\\, 0.05\\times(\\text{Attendance Score})\\notag\\\\\n&\\,+\\, 0.20\\times(\\text{Total Homework Score})\\notag\\\\\n&\\,+\\, 0.25\\times(\\text{Project and Website Score})\\notag\\\\\n&\\,+\\, 0.50\\times(\\text{Total Exam Score}).\\notag\n\\end{align}\n\\]"
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-14",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-14",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nGrading\n\nYou are allowed up to 4 absences without penalty.\n\nSend me an email if you have standard excused reasons (illness, family emergency, transportation problems, etc.).\n\nFor each absence beyond the initial five, there will be a deduction of 1% from the Total Percentage Grade.\nParticipation will be evaluated by quantity and quality of GitHub-based online discussions and in-person discussion.\nThe single lowest homework score will be dropped when calculating the total homework score."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-15",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-15",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nGrading\n\\[\n\\begin{align}\n&(\\text{Midterm Exam Score}) \\\\\n=\\, &\\text{max}\\,\\left\\{0.50\\times(\\text{Midterm Exam I Score}) \\,+\\, 0.50\\times(\\text{Midterm Exam II Score})\\right.,\\notag\\\\\n&\\qquad\\;\\,\\left.0.33\\times(\\text{Midterm Exam I Score}) \\,+\\, 0.67\\times(\\text{Midterm Exam II Score})\\right\\}.\\notag\n\\end{align}\n\\]\n\nThe Midterm Exam Score is the maximum between\n\nthe simple average of the Midterm Exam I score and the Midterm Exam II Score and\nthe weighted average of them with one-third weight on the Midterm Exam I Score and two-third weight on the Midterm Exam II Score."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-16",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-16",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nGrading\n\\[\n\\begin{align}\n&(\\text{Total Exam Score}) \\\\\n=\\, &\\text{max}\\,\\left\\{0.50\\times(\\text{Midterm Exam Score}) \\,+\\, 0.50\\times(\\text{Final Exam Score})\\right.,\\notag\\\\\n&\\qquad\\;\\,\\left.0.25\\times(\\text{Midterm Exam Score}) \\,+\\, 0.75\\times(\\text{Final Exam Score})\\right\\}.\\notag\n\\end{align}\n\\]\n\nThe Total Exam Score is the maximum between\n\nthe simple average of the Midterm Exam Score and the Final Exam Score and\nthe weighted average of them with one-fourth weight on the Midterm Exam Score and three-third weight on the Final Exam Score."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-17",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-17",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nMake-up Policy\n\nMake-up exams will not be given unless you have either a medically verified excuse or an absence excused by the University.\nIf you cannot take exams because of religious obligations, notify me by email at least two weeks in advance so that an alternative exam time may be set.\nA missed exam without an excused absence earns a grade of zero.\nLate submissions for homework assignment will be accepted with a penalty.\nA zero will be recorded for a missed assignment."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-18",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-18",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nAcademic Integrity and Plagiarism\n\nAll homework assignments and exams must be the original work by you.\nExamples of academic dishonesty include:\n\nrepresenting the work, thoughts, and ideas of another person as your own\nallowing others to represent your work, thoughts, or ideas as theirs, and\nbeing complicit in academic dishonesty by suspecting or knowing of it and not taking action.\n\nGeneseo‚Äôs Library offers frequent workshops to help you understand how to paraphrase, quote, and cite outside sources properly.\n\nSee https://www.geneseo.edu/library/library-workshops."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-19",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-19",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nAccessibility\n\nThe Office of Accessibility will coordinate reasonable accommodations for persons with physical, emotional, or cognitive disabilities to ensure equal access to academic programs, activities, and services at Geneseo.\nPlease contact me and the Office of Accessibility Services for questions related to access and accommodations."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-20",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-20",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nWell-being\n\nYou are strongly encouraged to communicate your needs to faculty and staff and seek support if you are experiencing unmanageable stress or are having difficulties with daily functioning.\nLiz Felski, the School of Business Student Advocate (felski@geneseo.edu, South Hall 303), or the Dean of Students (585-245-5706) can assist and provide direction to appropriate campus resources.\nFor more information, see https://www.geneseo.edu/dean_students."
  },
  {
    "objectID": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-21",
    "href": "danl-lec/danl-299-lec-01-2025-0825.html#syllabus-21",
    "title": "Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nCareer Design\n\nTo get information about career development, you can visit the Career Development Events Calendar (https://www.geneseo.edu/career_development/events/calendar).\nYou can stop by South 112 to get assistance in completing your Handshake Profile https://app.joinhandshake.com/login.\n\nHandshake is ranked #1 by students as the best place to find full-time jobs.\n50% of the 2018-2020 graduates received a job or internship offer on Handshake.\nHandshake is trusted by all 500 of the Fortune 500."
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#building-a-personal-website-on-github",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#building-a-personal-website-on-github",
    "title": "Lecture 3",
    "section": "Building a Personal Website on GitHub",
    "text": "Building a Personal Website on GitHub\n\nFollow steps described in Classwork 1."
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#lets-practice-markdown",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#lets-practice-markdown",
    "title": "Lecture 3",
    "section": "Let‚Äôs Practice Markdown!",
    "text": "Let‚Äôs Practice Markdown!\n\nJupyter Notebook, Quarto, and GitHub-based Discussion Boards use markdown as its underlying document syntax.\nLet‚Äôs do Classwork 2."
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#getting-started-with-jupyter-notebook-and-html",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#getting-started-with-jupyter-notebook-and-html",
    "title": "Lecture 3",
    "section": "Getting Started with Jupyter Notebook and HTML",
    "text": "Getting Started with Jupyter Notebook and HTML\nYAML\n\n\n\n\n\n\nAn YAML (yet another markup language) header surrounded by ---.\n\nIt is commonly used for document configuration (e.g., title, author, date, style, ‚Ä¶)."
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#getting-started-with-jupyter-notebook-and-html-1",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#getting-started-with-jupyter-notebook-and-html-1",
    "title": "Lecture 3",
    "section": "Getting Started with Jupyter Notebook and HTML",
    "text": "Getting Started with Jupyter Notebook and HTML\nKnitting / Rendering\n\n\nWhen we knit the document, Quarto sends the .qmd file to jupyter/knitr, which executes all of the code chunks and creates a new markdown (.md) document which includes the code and its output.\nThe markdown file (*.md) generated by jupyter/knitr is then processed by pandoc, which is responsible for creating the output file."
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#getting-started-with-jupyter-notebook-and-html-2",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#getting-started-with-jupyter-notebook-and-html-2",
    "title": "Lecture 3",
    "section": "Getting Started with Jupyter Notebook and HTML",
    "text": "Getting Started with Jupyter Notebook and HTML\nMarkdown, Jupyter Notebook, and HTML\n\nThe very original version of Markdown was invented mainly to write HTML content more easily.\n\nFor example, - SOME_TEXT in ‚Äú.md‚Äù is equivalent to &lt;ul&gt;&lt;li&gt; SOME_TEXT &lt;/li&gt; in ‚Äù.html‚Äù\n\nPandoc makes it possible to convert a Markdown document to a large variety of output formats, such as HTML."
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#getting-started-with-jupyter-notebook-and-html-3",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#getting-started-with-jupyter-notebook-and-html-3",
    "title": "Lecture 3",
    "section": "Getting Started with Jupyter Notebook and HTML",
    "text": "Getting Started with Jupyter Notebook and HTML\nMarkdown, Jupyter Notebook, and HTML\n---\ntitle: \"Habits\"\nauthor: YOUR_NAME\ndate: January 27, 2025\nformat: \n  html\n---\n\nTo create an HTML document from Jupyter Notebook, we specify the html output format in the YAML metadata of our document.\n\nBy default, format: html is set.\n\nOpen an empty Jupyter Notebook file from Google Colab (or VSCode).\n\nCreate the first cell that is Text.\nType the above YAML metadata to the first Text cell."
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#getting-started-with-jupyter-notebook-and-html-4",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#getting-started-with-jupyter-notebook-and-html-4",
    "title": "Lecture 3",
    "section": "Getting Started with Jupyter Notebook and HTML",
    "text": "Getting Started with Jupyter Notebook and HTML\nMarkdown, Jupyter Notebook, and HTML\n---\ntitle: \"Python Basics\"\nauthor: YOUR_NAME\ndate: \"2025-01-27\"\n---\n\nDownload the Jupyter Notebook file, danl-299-python-basic.ipynb from Brightspace, and open it from Google Colab (or VSCode if you prefer).\nThe above syntax is part of YAML metadata in danl-299-python-basic.ipynb.\n\nYAML should be always in the first cell, and the first cell should be text, not code.\n\nIn YAML, indentation really matters!\n\ntab (or four spaces) defines a level in YAML."
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-_quarto.yml",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-_quarto.yml",
    "title": "Lecture 3",
    "section": "Quarto Website: _quarto.yml",
    "text": "Quarto Website: _quarto.yml\n\n\n---\nproject:\n  type: website\n\nwebsite:\n  title: \"YOUR NAME\"\n  navbar:\n    left:\n      - text: Project\n        href: danl_proj_nba.ipynb\n      - text: Blog\n        href: blog-listing.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: false\n---\n\nThe _quarto.yml file configures the website settings.\nIndentation matters!\n\n\n\n\nIn RStudio, open the project USERNAME.github.io.Rporj.\n\nClick Project: (None) at the top-right corner.\nClick USERNAME.github.io.Rproj.\n\n_quarto.yml configures a website, and provides various options for HTML documents within the website."
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website",
    "title": "Lecture 3",
    "section": "Quarto Website",
    "text": "Quarto Website\nCustom CSS\n\nCascading Style Sheets (CSS) is used to format the layout of a webpage (color, font, text size, background, display, etc.).\n\nHTML will format the architecture of the house.\nCSS will be the carpet and walls to decorate the house.\nJavaScript adds interactive elements in the house, such as opening doors and lighting.\n\nWe are not front-end web developers.\n\nWe will not cover the use of CSS and JavaScript."
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-1",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-1",
    "title": "Lecture 3",
    "section": "Quarto Website",
    "text": "Quarto Website\nRendering\n\n\nThe Render button (command/Ctrl + shift + K) renders a single Quarto document file (e.g., index.qmd) to create an output document.\nquarto render from Terminal renders ALL Quarto documents and Jupyter Notebook files in your local working directory:\n\nquarto render\n\nquarto render should be used if there is any change in _quarto.yml.\n\n\n\n\n\nTip\n\n\n\nEdit _quarto.yml, *.qmd, or *.ipynb files ONLY from your local laptop or Google Colab.\n\nDo not edit them from your GitHub repo for the website."
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-2",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-2",
    "title": "Lecture 3",
    "section": "Quarto Website",
    "text": "Quarto Website\nAdding *.ipynb to a Quarto website\n\nBy default, quarto render doesn‚Äôt execute any code in .ipynb notebooks.\nquarto render renders .ipynb notebooks, so that corresponding html files are rendered.\n\nIf you need to update cell outputs in *.ipynb, run that *.ipynb on Google Colab, save the notebook, and download it to your local working directory."
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-3",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-3",
    "title": "Lecture 3",
    "section": "Quarto Website",
    "text": "Quarto Website\nAppearance and Style\n\ntheme specifies the Bootstrap theme to use for the page (themes are drawn from the Bootswatch theme library).\n\nValid themes include default, bootstrap, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united, and yeti.\n\nhighlight-style specifies the code highlighting style.\n\nSupported styles include default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, breezedark, and textmate."
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-4",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-4",
    "title": "Lecture 3",
    "section": "Quarto Website",
    "text": "Quarto Website\nAbout\n\nYour index.qmd sets a front page about you.\n\nDetails in about pages are available here:\nhttps://quarto.org/docs/websites/website-about.html.\n\nQuarto includes 5 built in templates:\n\njolla\ntrestles\nsolana\nmarquee\nbroadside"
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-5",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-5",
    "title": "Lecture 3",
    "section": "Quarto Website",
    "text": "Quarto Website\nIcons and Emojis\n\nA ton of Bootstrap icons are available here:\n\nhttps://icons.getbootstrap.com.\n\nA ton of markdown emojis are available here üòÑ:\n\nhttps://github.com/ikatyang/emoji-cheat-sheet\nhttps://gist.github.com/rxaviers/7360908"
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-6",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-6",
    "title": "Lecture 3",
    "section": "Quarto Website",
    "text": "Quarto Website\nNaviation and Adding Pages\nleft:\n  - text: Project\n    href: danl_proj_nba.ipynb\n  - text: Blog\n    href: blog-listing.qmd\n\nWe can add a new page to the website through navbar in _quarto.yml"
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-7",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-7",
    "title": "Lecture 3",
    "section": "Quarto Website",
    "text": "Quarto Website\nNaviation and Adding Pages\nleft:\n  - text: \"Python Data Analysis\"\n    menu:\n      - pandas_basic.ipynb\n      - seaborn_basic.ipynb\n\nWe can also create a drop-down menu by including a menu\nMore details about navbar are available here:\n\nhttps://quarto.org/docs/websites/website-navigation.html"
  },
  {
    "objectID": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-basics",
    "href": "danl-lec/danl-299-lec-03-2025-0904.html#quarto-website-basics",
    "title": "Lecture 3",
    "section": "Quarto Website Basics",
    "text": "Quarto Website Basics\n\nLet‚Äôs do Classwork 3."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-1",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-1",
    "title": "Lecture 5",
    "section": "Booleans, Conditions, and if Statements",
    "text": "Booleans, Conditions, and if Statements\n10 == 20\n10 == '10'\n\nBoolean data have either True or False value."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-2",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-2",
    "title": "Lecture 5",
    "section": "Booleans, Conditions, and if Statements",
    "text": "Booleans, Conditions, and if Statements\n\n\n\n\n\n\n\n\nExisting booleans can be combined, which create a boolean when executed."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-3",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-3",
    "title": "Lecture 5",
    "section": "Booleans, Conditions, and if Statements",
    "text": "Booleans, Conditions, and if Statements\nConditions are expressions that evaluate as booleans."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-4",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-4",
    "title": "Lecture 5",
    "section": "Booleans, Conditions, and if Statements",
    "text": "Booleans, Conditions, and if Statements\nboolean_condition1 = 10 == 20\nprint(boolean_condition1)\n\nboolean_condition2 = 10 == '10'\nprint(boolean_condition2)\n\nThe == is an operator that compares the objects on either side and returns True if they have the same values\nQ. What does not (not True) evaluate to?\nQ. Classwork 4.2"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-5",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-5",
    "title": "Lecture 5",
    "section": "Booleans, Conditions, and if Statements",
    "text": "Booleans, Conditions, and if Statements\nname = \"Geneseo\"\nscore = 99\n\nif name == \"Geneseo\" and score &gt; 90:\n    print(\"Geneseo, you achieved a high score.\")\n\nif name == \"Geneseo\" or score &gt; 90:\n    print(\"You could be called Geneseo or have a high score\")\n\nif name != \"Geneseo\" and score &gt; 90:\n    print(\"You are not called Geneseo and you have a high score\")\n\nThe real power of conditions comes when we start to use them in more complex examples, such as if statements."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-6",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-6",
    "title": "Lecture 5",
    "section": "Booleans, Conditions, and if Statements",
    "text": "Booleans, Conditions, and if Statements\nname_list = [\"Lovelace\", \"Smith\", \"Hopper\", \"Babbage\"]\n\nprint(\"Lovelace\" in name_list)\n\nprint(\"Bob\" in name_list)\n\nOne of the most useful conditional keywords is in.\n\nThis one must pop up ten times a day in most coders‚Äô lives because it can pick out a variable or make sure something is where it‚Äôs supposed to be.\n\nQ. Check if ‚Äúa‚Äù is in the string ‚ÄúSun Devil Arena‚Äù using in. Is ‚Äúa‚Äù in ‚ÄúAnyone‚Äù?"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-7",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-7",
    "title": "Lecture 5",
    "section": "Booleans, Conditions, and if Statements",
    "text": "Booleans, Conditions, and if Statements\nscore = 98\n\nif score == 100:\n    print(\"Top marks!\")\nelif score &gt; 90 and score &lt; 100:\n    print(\"High score!\")\nelif score &gt; 10 and score &lt;= 90:\n    pass\nelse:\n    print(\"Better luck next time.\")\n\nOne conditional construct we‚Äôre bound to use at some point, is the if-else chain:"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-with-in",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#booleans-conditions-and-if-statements-with-in",
    "title": "Lecture 5",
    "section": "Booleans, Conditions, and if Statements with in",
    "text": "Booleans, Conditions, and if Statements with in\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nfavorite = \"banana\"\n\nif favorite in fruits:\n    print(f\"{favorite} is available!\")\nelse:\n    print(f\"{favorite} is not in the list.\")\n\nThe keyword in lets you check whether a value is present in a list, string, or other iterable.\n\nThis works seamlessly inside an if-else structure.\n\nUseful for membership tests such as:\n\nValidating if a company is in a stock list\n\nSeeing if a word exists in a sentence"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#indentation",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#indentation",
    "title": "Lecture 5",
    "section": "Indentation",
    "text": "Indentation\n\nWe have seen that certain parts of the code examples are indented.\nCode that is part of a function, a conditional clause, or loop is indented.\nIndention is actually what tells the Python interpreter that some code is to be executed as part of, say, a loop and not to executed after the loop is finished."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#indentation-1",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#indentation-1",
    "title": "Lecture 5",
    "section": "Indentation",
    "text": "Indentation\nx = 10\n\nif x &gt; 2:\n    print(\"x is greater than 2\")\n\nHere‚Äôs a basic example of indentation as part of an if statement.\nThe standard practice for indentation is that each sub-statement should be indented by 4 spaces."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#slicing-methods",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#slicing-methods",
    "title": "Lecture 5",
    "section": "Slicing Methods",
    "text": "Slicing Methods\n\n\n\n\nWith slicing methods, we can get subset of the data object.\nSlicing methods can apply for strings, lists, arrays, and DataFrames.\nThe above example describes indexing in Python"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#strings",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#strings",
    "title": "Lecture 5",
    "section": "Strings",
    "text": "Strings\nstring = \"cheesecake\"\nprint( string[-4:] )\n\nFrom strings, we can access the individual characters via slicing and indexing.\n\n\n\nstring = \"cheesecake\"\nprint(\"String has length:\")\nprint( len(string) )\n\nlist_of_numbers = range(1, 20)\nprint(\"List of numbers has length:\")\nprint( len(list_of_numbers) )\n\n\n\nBoth lists and strings will allow us to use the len() command to get their length:"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#string-related-functions",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#string-related-functions",
    "title": "Lecture 5",
    "section": "String-related Functions",
    "text": "String-related Functions\nDot operation\n\nIn Python, we can access attributes by using a dot notation (.).\nUnlike len(), some functions use a dot to access to strings.\nTo use those string functions, type (1) the name of the string, (2) a dot, (3) the name of the function, and (4) any arguments that the function needs:\n\nstring_name.some_function(arguments)."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#string-related-functions-1",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#string-related-functions-1",
    "title": "Lecture 5",
    "section": "String-related Functions",
    "text": "String-related Functions\nSplit with split()\n\nWe can use the built-in string split() function to break a string into a list of smaller strings based on some separator.\n\nIf we don‚Äôt specify a separator, split() uses any sequence of white space characters‚Äînewlines, spaces, and tabs:\n\ntasks = 'get gloves,get mask,give cat vitamins,call ambulance'\ntasks.split(',')\ntasks.split()"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#string-related-functions-2",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#string-related-functions-2",
    "title": "Lecture 5",
    "section": "String-related Functions",
    "text": "String-related Functions\nCombine by Using join()\n\njoin() collapses a list of strings into a single string.\n\ncrypto_list = ['Yeti', 'Bigfoot', 'Loch Ness Monster']\ncrypto_string = ', '.join(crypto_list)\nprint('Found and signing book deals:', crypto_string)"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#strings-and-slicing",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#strings-and-slicing",
    "title": "Lecture 5",
    "section": "Strings and Slicing",
    "text": "Strings and Slicing\n\nWe can extract a substring (a part of a string) from a string by using a slice.\nWe define a slice by using square brackets ([]), a start index, an end index, and an optional step count between them.\n\nWe can omit some of these.\n\nThe slice will include characters from index start to one before end:"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#get-a-substring-with-a-slice",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#get-a-substring-with-a-slice",
    "title": "Lecture 5",
    "section": "Get a Substring with a Slice",
    "text": "Get a Substring with a Slice\n\n[:][ start :][: end ][ start : end ][ start : end : step ]\n\n\nletters = 'abcdefghij'\nletters[:]\n\n[:] extracts the entire sequence from start to end.\n\n\n\nletters = 'abcdefghij'\nletters[4:]\nletters[2:]\nletters[-3:]\nletters[-50:]\n\n[ start :] specifies from the start index to the end.\n\n\n\nletters = 'abcdefghij'\nletters[:3]\nletters[:-3]\nletters[:70]\n\n[: end ] specifies from the beginning to the end index minus 1.\n\n\n\nletters = 'abcdefghij'\nletters[2:5]\nletters[-26:-24]\nletters[35:37]\n\n[ start : end ] indicates from the start index to the end index minus 1.\n\n\n\nletters = 'abcdefghij'\nletters[2 : 6 : 2]   # From index 2 to 5, by steps of 2 characters\nletters[ : : 3]     # From the start to the end, in steps of 3 characters\nletters[ 6 : : 4 ]    # From index 19 to the end, by 4\nletters[ : 7 : 5 ]    # From the start to index 6 by 5:\nletters[-1 : : -1 ]   # Starts at the end and ends at the start\nletters[: : -1 ]\n\n[ start : end : step ] extracts from the start index to the end index minus 1, skipping characters by step."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#lists",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#lists",
    "title": "Lecture 5",
    "section": "Lists",
    "text": "Lists\n\nPython is\n\na zero-indexed language (things start counting from zero);\nleft inclusive;\nright exclusive when we are specifying a range of values."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#lists-1",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#lists-1",
    "title": "Lecture 5",
    "section": "Lists",
    "text": "Lists\nlist_example = ['one', 'two', 'three']\nlist_example[ 0 : 1 ]\nlist_example[ 1 : 3 ]\n\n\n\n\nWe can think of items in a list-like object as being fenced in.\n\nThe index represents the fence post."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#lists-2",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#lists-2",
    "title": "Lecture 5",
    "section": "Lists",
    "text": "Lists\n\n[index]Get an Item with a Slice\n\n\nGet an Item by [index]\nsuny = ['Geneseo', 'Brockport', 'Oswego', 'Binghamton', \n        'Stony Brook', 'New Paltz'] \n\nWe can extract a single value from a list by specifying its index:\n\n\n\nsuny[0]\nsuny[1]\nsuny[2]\nsuny[7]\n\nsuny[-1]\nsuny[-2]\nsuny[-3]\nsuny[-7]\n\n\n\n\n\nWe can extract a subsequence of a list by using a slice:\n\nsuny = ['Geneseo', 'Brockport', 'Oswego', 'Binghamton', \n        'Stony Brook', 'New Paltz'] \nsuny[0:2]    # A slice of a list is also a list.\n\n\nsuny[ : : 2]\nsuny[ : : -2]\nsuny[ : : -1]\n\nsuny[4 : ]\nsuny[-6 : ]\nsuny[-6 : -2]\nsuny[-6 : -4]"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#slicing-methods-1",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#slicing-methods-1",
    "title": "Lecture 5",
    "section": "Slicing Methods",
    "text": "Slicing Methods\n\nQ. Classwork 4.3"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#functions",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#functions",
    "title": "Lecture 5",
    "section": "Functions",
    "text": "Functions\nint(\"20\") \nfloat(\"14.3\")\nstr(5)\nint(\"xyz\")\n\nA function can take any number and type of input parameters and return any number and type of output results.\nPython ships with more than 65 built-in functions.\nPython also allows a user to define a new function.\nWe will mostly use built-in functions."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#functions-arguments-and-parameters-1",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#functions-arguments-and-parameters-1",
    "title": "Lecture 5",
    "section": "Functions, Arguments, and Parameters",
    "text": "Functions, Arguments, and Parameters\nprint(\"Cherry\", \"Strawberry\", \"Key Lime\")\nprint(\"Cherry\", \"Strawberry\", \"Key Lime\", sep = \"!\")\nprint(\"Cherry\", \"Strawberry\", \"Key Lime\", sep=\" \")\n\nWe invoke a function by entering its name and a pair of opening and closing parentheses.\nMuch as a cooking recipe can accept ingredients, a function invocation can accept inputs called arguments.\nWe pass arguments sequentially inside the parentheses (, separated by commas).\nA parameter is a name given to an expected function argument.\nA default argument is a fallback value that Python passes to a parameter if the function invocation does not explicitly provide one."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#functions-arguments-and-parameters-2",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#functions-arguments-and-parameters-2",
    "title": "Lecture 5",
    "section": "Functions, Arguments, and Parameters",
    "text": "Functions, Arguments, and Parameters\n\nQ. Classwork 4.4"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#repeat-with-while",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#repeat-with-while",
    "title": "Lecture 5",
    "section": "Repeat with while",
    "text": "Repeat with while\n\n\ncount = 1        \nwhile count &lt;= 5:\n    print(count)\n    count += 1\n\n\nWe first assigned the value 1 to count.\nThe while loop compared the value of count to 5 and continued if count was less than or equal to 5.\nInside the loop, we printed the value of count and then incremented its value by one with the statement count += 1.\nPython goes back to the top of the loop, and again compares count with 5.\nThe value of count is now 2, so the contents of the while loop are again executed, and count is incremented to 3.\nThis continues until count is incremented from 5 to 6 at the bottom of the loop.\nOn the next trip to the top, count &lt;= 5 is now False, and the while loop ends."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#asking-the-user-for-input",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#asking-the-user-for-input",
    "title": "Lecture 5",
    "section": "Asking the user for input",
    "text": "Asking the user for input\n\n\nstuff = input()\n# Type something and press Return/Enter on Console \n# before running print(stuff)\nprint(stuff)\n\n\nSometimes we would like to take the value for a variable from the user via their keyboard.\n\nThe input() function gets input from the keyboard.\nWhen the input() is called, the program stops and waits for the user to type something on Console (interactive Python interpreter).\nWhen the user presses Return or Enter on Console, the program resumes and input returns what the user typed as a string."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#cancel-with-break",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#cancel-with-break",
    "title": "Lecture 5",
    "section": "Cancel with break",
    "text": "Cancel with break\n\n\nwhile True:\n    user_input = input(\"Enter 'yes' to continue or 'no' to stop: \")\n    if user_input.lower() == 'no':\n        print(\"Exiting the loop. Goodbye!\")\n        break\n    elif user_input.lower() == 'yes':\n        print(\"You chose to continue.\")\n    else:\n        print(\"Invalid input, please enter 'yes' or 'no'.\")\n\n\nWhile loop is used to execute a block of code repeatedly until given boolean condition evaluated to False.\n\nwhile True loop will run forever unless we write it with a break statement.\n\nIf we want to loop until something occurs, but we‚Äôre not sure when that might happen, we can use an infinite loop with a break statement."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#repeat-with-while-1",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#repeat-with-while-1",
    "title": "Lecture 5",
    "section": "Repeat with while",
    "text": "Repeat with while\nSkip Ahead with continue\n\n\nwhile True:\n    value = input(\"Integer, please [q to quit]: \")\n    if value == 'q': # quit\n        break\n    number = int(value)\n    if number % 2 == 0: # an even number\n        continue\n    print(number, \"squared is\", number*number)\n\n\nSometimes, we don‚Äôt want to break out of a loop but just want to skip ahead to the next iteration for some reason.\nThe continue statement is used to skip the rest of the code inside a loop for the current iteration only."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#repeat-with-while-2",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#repeat-with-while-2",
    "title": "Lecture 5",
    "section": "Repeat with while",
    "text": "Repeat with while\nCheck break Use with else\n\nWe can consider using while with else when we‚Äôve coded a while loop to check for something, and breaking as soon as it‚Äôs found. \n\nnumbers = [1, 3, 5]\nposition = 0\n\nwhile position &lt; len(numbers):\n    number = numbers[position]\n    if number &gt; 4:  # Condition changed to checking if the number is greater than 4\n        print('Found a number greater than 4:', number)\n        break\n    position += 1\nelse:  # break not called\n    print('No number greater than 4 found')\n\nConsider it a break checker."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#iterate-with-for-and-in",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#iterate-with-for-and-in",
    "title": "Lecture 5",
    "section": "Iterate with for and in",
    "text": "Iterate with for and in\n\nSometimes we want to loop through a set of things such as a string of text, a list of words or a list of numbers.\n\nWhen we have a list of things to loop through, we can construct a for loop.\nA for loop makes it possible for you to traverse data structures without knowing how large they are or how they are implemented."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#iterate-with-for-and-in-1",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#iterate-with-for-and-in-1",
    "title": "Lecture 5",
    "section": "Iterate with for and in",
    "text": "Iterate with for and in\n\nLet‚Äôs see two ways to walk through a string here:\n\n\n\nword = 'thud'\noffset = 0\nwhile offset &lt; len(word):\n    print(word[offset])\n    offset += 1\n\nword = 'thud'\nfor letter in word:\n    print(letter)\n\n\n\nWhich one do you prefer?"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#iterate-with-for-and-in-2",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#iterate-with-for-and-in-2",
    "title": "Lecture 5",
    "section": "Iterate with for and in",
    "text": "Iterate with for and in\nCancel with break\nword = 'thud'\nfor letter in word:\n    if letter == 'u':\n        break\n    print(letter)\n\nA break in a for loop breaks out of the loop, as it does for a while loop:"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#iterate-with-for-and-in-3",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#iterate-with-for-and-in-3",
    "title": "Lecture 5",
    "section": "Iterate with for and in",
    "text": "Iterate with for and in\nSkip with continue\nword = 'thud'\nfor letter in word:\n    if letter == 'u':\n        continue\n    print(letter)\n\nInserting a continue in a for loop jumps to the next iteration of the loop, as it does for a while loop."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#generate-number-sequences-with-range",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#generate-number-sequences-with-range",
    "title": "Lecture 5",
    "section": "Generate Number Sequences with range()",
    "text": "Generate Number Sequences with range()\n\nThe range() function returns a stream of numbers within a specified range, without first having to create and store a large data structure such as a list or tuple.\n\nThis lets us create huge ranges without using all the memory in our computers and crashing our program.\nrange() returns an iterable object, so we need to step through the values with for ‚Ä¶ in, or convert the object to a sequence like a list."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#for-in-range",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#for-in-range",
    "title": "Lecture 5",
    "section": "for ‚Ä¶ in range()",
    "text": "for ‚Ä¶ in range()\n\n\nfor x in range(0, 3):\n    print(x)\nlist( range(0, 3) )\n\n\nWe use range() similar to how we use slices: range( start, stop, step ).\n\nIf we omit start, the range begins at 0.\nThe only required value is stop; as with slices, the last value created will be just before stop.\nThe default value of step is 1, but we can change it."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#iterate-with-for-and-in-4",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#iterate-with-for-and-in-4",
    "title": "Lecture 5",
    "section": "Iterate with for and in",
    "text": "Iterate with for and in\nCheck break Use with else\n\nSimilar to while, for has an optional else that checks whether the for completed normally.\n\nIf break was not called, the else statement is run.\n\n\nword = 'thud'\nfor letter in word:\n    if letter == 'x':\n        print(\"Eek! An 'x'!\")\n        break\n    print(letter)\nelse:\n    print(\"No 'x' in there.\")"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#loop-with-while-and-for-1",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#loop-with-while-and-for-1",
    "title": "Lecture 5",
    "section": "Loop with while and for",
    "text": "Loop with while and for\nClass Exercises\n\nQ. Classwork 4.5\nQ. Classwork 4.6"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#list-comprehension",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#list-comprehension",
    "title": "Lecture 5",
    "section": "List Comprehension",
    "text": "List Comprehension\nWhat is List Comprehension?\n\nA concise way to create or modify lists.\nSyntax: [expression for item in iterable if condition]\n\n\nCreating a List of Squares:\n\nsquares = [x**2 for x in range(5)]\n\nFiltering Items:\n\nnumbers = [1, 2, 3, 4, 5, 6]\nevens = [x for x in numbers if x != 2]"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#dictionary-comprehension",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#dictionary-comprehension",
    "title": "Lecture 5",
    "section": "Dictionary Comprehension",
    "text": "Dictionary Comprehension\nWhat is Dictionary Comprehension?\n\nA concise way to create or modify dictionaries.\nSyntax: {key_expression: value_expression for item in iterable if condition}\n\n\nCreating a Dictionary of Squares:\n\nsquares_dict = {x: x**2 for x in range(5)}\n\nFiltering Dictionary Items:\n\n   my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n   filtered_dict = {k: v for k, v in my_dict.items() if v != 2}\n\nSwapping Keys and Values:\n\noriginal_dict = {'a': 1, 'b': 2, 'c': 3}\nswapped_dict = {v: k for k, v in original_dict.items()}"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#modifying-a-list",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#modifying-a-list",
    "title": "Lecture 5",
    "section": "Modifying a List",
    "text": "Modifying a List\nAdding Items\n\nappend(): Adds an item to the end of the list.\n\nmy_list = [1, 2, 3]\nmy_list.append(4)"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#modifying-a-list-1",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#modifying-a-list-1",
    "title": "Lecture 5",
    "section": "Modifying a List",
    "text": "Modifying a List\nDeleting Items\n\nremove(): Deletes the first occurrence of value in the list.\n\nmy_list = [1, 2, 3, 4, 2]\nmy_list.remove(2)\n\nList Comprehension: Removes items based on a condition.\n\nmy_list = [1, 2, 3, 4, 2]\nmy_list = [x for x in my_list if x != 2]  \n\ndel statement: Deletes an item by index or a slice of items.\n\nmy_list = [1, 2, 3, 4]\ndel my_list[1] \ndel my_list[1:3]"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#modifying-a-dictionary",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#modifying-a-dictionary",
    "title": "Lecture 5",
    "section": "Modifying a Dictionary",
    "text": "Modifying a Dictionary\nAdding/Updating Items\n\nupdate(): Adds new key-value pairs or updates existing ones.\n\nmy_dict = {'a': 1, 'b': 2}\nmy_dict.update({'c': 3})  \nmy_dict.update({'a': 10})"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#modifying-a-dictionary-1",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#modifying-a-dictionary-1",
    "title": "Lecture 5",
    "section": "Modifying a Dictionary",
    "text": "Modifying a Dictionary\nDeleting Items\n\nDictionary Comprehension: Removes items based on a condition.\n\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\nmy_dict = {k: v for k, v in my_dict.items() if v != 2}  \n\ndel statement: Deletes an item by key.\n\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\ndel my_dict['b']"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-1",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-1",
    "title": "Lecture 5",
    "section": "Handle Errors with try and except",
    "text": "Handle Errors with try and except\nException handlers\n\nIn some languages, errors are indicated by special function return values.\n\nPython uses exceptions: code that is executed when an associated error occurs.\n\nWhen we run code that might fail under some circumstances, we also need appropriate exception handlers to intercept any potential errors.\n\nAccessing a list or tuple with an out-of-range position, or a dictionary with a nonexistent key."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-2",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-2",
    "title": "Lecture 5",
    "section": "Handle Errors with try and except",
    "text": "Handle Errors with try and except\nErrors\nshort_list = [1, 2, 3]\nposition = 5\nshort_list[position]\n\nIf we don‚Äôt provide your own exception handler, Python prints an error message and some information about where the error occurred and then terminates the program:"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-3",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-3",
    "title": "Lecture 5",
    "section": "Handle Errors with try and except",
    "text": "Handle Errors with try and except\nshort_list = [1, 2, 3]\nposition = 5\n\ntry:\n    short_list[position]\nexcept:\n    print('Need a position between 0 and', len(short_list)-1, ' but got',\n    position)\n\nRather than leaving things to chance, use try to wrap your code, and except to provide the error handling:"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-4",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-4",
    "title": "Lecture 5",
    "section": "Handle Errors with try and except",
    "text": "Handle Errors with try and except\nshort_list = [1, 2, 3]\nposition = 5\ntry:\n    short_list[position]\nexcept:\n    print('Need a position between 0 and', len(short_list)-1, ' but got',\n    position)\n\nThe code inside the try block is run.\n\nIf there is an error, an exception is raised and the code inside the except block runs.\n\nIf there are no errors, the except block is skipped."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-5",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-5",
    "title": "Lecture 5",
    "section": "Handle Errors with try and except",
    "text": "Handle Errors with try and except\nexcept type\n\nSpecifying a plain except with no arguments, as we did here, is a catchall for any exception type.\nIf more than one type of exception could occur, it‚Äôs best to provide a separate exception handler for each.\nWe get the full exception object in the variable name if we use the form:"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-6",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-6",
    "title": "Lecture 5",
    "section": "Handle Errors with try and except",
    "text": "Handle Errors with try and except\nexcept type\nshort_list = [1, 2, 3]\nwhile True:\n    value = input('Position [q to quit]? ')\n    if value == 'q':\n        break\n    try:\n        position = int(value)\n        print(short_list[position])\n    except IndexError as err:\n        print('Bad index:', position, '-', err)\n    except Exception as other:\n        print('Something else broke:', other)"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-7",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-7",
    "title": "Lecture 5",
    "section": "Handle Errors with try and except",
    "text": "Handle Errors with try and except\nexcept type\n\nThe example looks for an IndexError first, because that‚Äôs the exception type raised when we provide an illegal position to a sequence.\nIt saves an IndexError exception in the variable err, and any other exception in the variable other.\nThe example prints everything stored in other to show what you get in that object.\n\nInputting position 3 raised an IndexError as expected.\nEntering two annoyed the int() function, which we handled in our second, catchall except code."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-8",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#handle-errors-with-try-and-except-8",
    "title": "Lecture 5",
    "section": "Handle Errors with try and except",
    "text": "Handle Errors with try and except\nClass Exercises\n\nQ. Classwork 4.7"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#importing-modules-packages-and-libraries",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#importing-modules-packages-and-libraries",
    "title": "Lecture 5",
    "section": "Importing Modules, Packages, and Libraries",
    "text": "Importing Modules, Packages, and Libraries\n\nPython is a general-purpose programming language and is not specialized for numerical or statistical computation.\nThe core libraries that enable Python to store and analyze data efficiently are:\n\npandas\nnumpy\nmatplotlib and seaborn"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#importing-modules-packages-and-libraries-1",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#importing-modules-packages-and-libraries-1",
    "title": "Lecture 5",
    "section": "Importing Modules, Packages, and Libraries",
    "text": "Importing Modules, Packages, and Libraries\npandas\n\n\n\n\npandas provides Series and DataFrames which are used to store data in an easy-to-use format."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#importing-modules-packages-and-libraries-2",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#importing-modules-packages-and-libraries-2",
    "title": "Lecture 5",
    "section": "Importing Modules, Packages, and Libraries",
    "text": "Importing Modules, Packages, and Libraries\nnumpy\n\n\n\n\nnumpy, numerical Python, provides the array block (np.array()) for doing fast and efficient computations;"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#importing-modules-packages-and-libraries-3",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#importing-modules-packages-and-libraries-3",
    "title": "Lecture 5",
    "section": "Importing Modules, Packages, and Libraries",
    "text": "Importing Modules, Packages, and Libraries\nmatplotlib and seaborn\n\n\n\n\nmatplotlib provides graphics. The most important submodule would be matplotlib.pyplot.\nseaborn provides a general improvement in the default appearance of matplotlib-produced plots."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#importing-modules-packages-and-libraries-4",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#importing-modules-packages-and-libraries-4",
    "title": "Lecture 5",
    "section": "Importing Modules, Packages, and Libraries",
    "text": "Importing Modules, Packages, and Libraries\nimport statement\n\nA module is basically a bunch of related codes saved in a file with the extension .py.\nA package is basically a directory of a collection of modules.\nA library is a collection of packages\nWe refer to code of other module/package/library by using the Python import statement.\n\nimport LIBRARY_NAME\n\nThis makes the code and variables in the imported module available to our programming codes."
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#importing-modules-packages-and-libraries-5",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#importing-modules-packages-and-libraries-5",
    "title": "Lecture 5",
    "section": "Importing Modules, Packages, and Libraries",
    "text": "Importing Modules, Packages, and Libraries\nimport statement\n\n\nas\n\nWe can use the as keyword when importing the module/package/library using its canonical names.\n\nimport LIBRARY as SOMETHING_SHORT\n\nfrom\n\nWe can use the from keyword when specifying Python module/package/library from which we want to import something.\n\nfrom LIBRARY import FUNCTION, PACKAGE, MODULE"
  },
  {
    "objectID": "danl-lec/danl-299-lec-05-2025-0910.html#installing-modules-packages-and-libraries",
    "href": "danl-lec/danl-299-lec-05-2025-0910.html#installing-modules-packages-and-libraries",
    "title": "Lecture 5",
    "section": "Installing Modules, Packages, and Libraries",
    "text": "Installing Modules, Packages, and Libraries\npip tool\n\n\n\nTo install a library LIBRARY on your Google Colab, run:\n\n!pip install LIBRARY\n\n\nTo install a library LIBRARY on your Anaconda Python, open your Spyder IDE, Anaconda Prompt, or Terminal and run:\n\npip install LIBRARY\n\n\n\nQ. Classwork 4.8"
  },
  {
    "objectID": "listing-danl-299-hw.html",
    "href": "listing-danl-299-hw.html",
    "title": "DANL 299 - Homework",
    "section": "",
    "text": "Title\n\n\nSubtitle\n\n\nDate\n\n\n\n\n\n\nHomework 1\n\n\nPersonal Website and Python Basics\n\n\nSeptember 11, 2025\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#variables-are-names-not-places",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#variables-are-names-not-places",
    "title": "Lecture 4",
    "section": "Variables Are Names, Not Places",
    "text": "Variables Are Names, Not Places\n\n\n\n\nA value is datum (literal) such as a number or text.\nThere are different types of values:\n\n352.3 is known as a float or double;\n22 is an integer;\n‚ÄúHello World!‚Äù is a string."
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#values-variables-and-types",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#values-variables-and-types",
    "title": "Lecture 4",
    "section": "Values, Variables, and Types",
    "text": "Values, Variables, and Types\na = 10\nprint(a)\n\n\n\n\n\n\n\nA variable is a name that refers to a value.\n\nWe can think of a variable as a box that has a value, or multiple values, packed inside it.\n\nA variable is just a name!"
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#values-variables-and-types-1",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#values-variables-and-types-1",
    "title": "Lecture 4",
    "section": "Values, Variables, and Types",
    "text": "Values, Variables, and Types\n\n\nSometimes you will hear variables referred to as objects.\nEverything that is not a literal value, such as 10, is an object."
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#variable-in-dataframe",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#variable-in-dataframe",
    "title": "Lecture 4",
    "section": "Variable in DataFrame",
    "text": "Variable in DataFrame\n\n\n\n\n\n\nDefinition: A data.frame is a table-like data structure used for storing data in a tabular format with rows and columns.\nStructure: Consists of:\n\nVariables (Columns)\nObservations (Rows)\nValues (Cells): Individual data points within each cell of the data.frame."
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#assignment",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#assignment",
    "title": "Lecture 4",
    "section": "Assignment ( = )",
    "text": "Assignment ( = )\n# Here we assign the integer value 5 to the variable x.\nx = 5   \n\n# Now we can use the variable x in the next line.\ny = x + 12  \ny\n\nIn Python, we use = to assign a value to a variable.\nIn math, = means equality of both sides.\nIn programs, = means assignment: assign the value on the right side to the variable on the left side."
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#code-and-comment-style",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#code-and-comment-style",
    "title": "Lecture 4",
    "section": "Code and comment style",
    "text": "Code and comment style\n\nThe two main principles for coding and managing data are:\n\nMake things easier for your future self.\nDon‚Äôt trust your future self.\n\nThe # mark is Google Colab‚Äôs comment character.\n\nThe # character has many names: hash, sharp, pound, or octothorpe.\n# indicates that the rest of the line is to be ignored.\nWrite comments before the line that you want the comment to apply to.\n\nConsider adding more comments on code cells and their results using text cells."
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#assignment-1",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#assignment-1",
    "title": "Lecture 4",
    "section": "Assignment ( = )",
    "text": "Assignment ( = )\n\nIn programming code, everything on the right side needs to have a value.\n\nThe right side can be a literal value, or a variable that has already been assigned a value, or a combination.\n\nWhen Python reads y = x + 12, it does the following:\n\nSees the = in the middle.\nKnows that this is an assignment.\nCalculates the right side (gets the value of the object referred to by x and adds it to 12).\nAssigns the result to the left-side variable, y."
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#variables-are-names-not-places-1",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#variables-are-names-not-places-1",
    "title": "Lecture 4",
    "section": "Variables Are Names, Not Places",
    "text": "Variables Are Names, Not Places\nlist_example = [10, 1.23, \"like this\", True, None]\nprint(list_example)\ntype(list_example)\n\nThe most basic built-in data types that we‚Äôll need to know about are:\n\nintegers 10\nfloats 1.23\nstrings \"like this\"\nbooleans True\nnothing None\n\nPython also has a built-in type of data container called a list (e.g., [10, 15, 20]) that can contain anything, even different types"
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#data-types",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#data-types",
    "title": "Lecture 4",
    "section": "Data Types",
    "text": "Data Types\n\n\n\n\nThe second column (Type) contains the Python name of that type.\nThe third column (Mutable?) indicates whether the value can be changed after creation."
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#brackets",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#brackets",
    "title": "Lecture 4",
    "section": "Brackets",
    "text": "Brackets\n\n\nThere are several kinds of brackets in Python, including [], {}, and ().\n\n\n[]{}()\n\n\nvector = ['a', 'b']\nvector[0]\n\n[] is used to denote a list or to signify accessing a position using an index.\n\n\n\n{'a', 'b'}  # set\n{'first_letter': 'a', 'second_letter': 'b'}  # dictionary\n\n{} is used to denote a set or a dictionary (with key-value pairs).\n\n\n\nnum_tup = (1, 2, 3)\nsum(num_tup)\n\n() is used to denote\n\na tuple, or\nthe arguments to a function, e.g., function(x) where x is the input passed to the function."
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#operators",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#operators",
    "title": "Lecture 4",
    "section": "Operators",
    "text": "Operators\nstring_one = \"This is an example \"\nstring_two = \"of string concatenation\"\nstring_full = string_one + string_two\nprint(string_full)\n\nAll of the basic operators we see in mathematics are available to use:\n\n\n\n\n+ for addition\n- for subtraction\n\n\n\n* for multiplication\n** for powers\n\n\n\n/ for division\n// for integer division\n\n\n\n\nThese work as you‚Äôd expect on numbers.\nThese operators are sometimes defined for other built-in data types too.\n\nWe can ‚Äòsum‚Äô strings (which really concatenates them)."
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#operators-1",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#operators-1",
    "title": "Lecture 4",
    "section": "Operators",
    "text": "Operators\n\n\nlist_one = [\"apples\", \"oranges\"]\nlist_two = [\"pears\", \"satsumas\"]\nlist_full = list_one + list_two\nprint(list_full)\n\nIt works for lists too:\n\n\nstring = \"apples, \"\nprint(string * 3)\n\nWe can multiply strings!"
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#operators-2",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#operators-2",
    "title": "Lecture 4",
    "section": "Operators",
    "text": "Operators\nQ. Classwork 4.1\nUsing Python operations only, calculate below: \\[\\frac{2^5}{7 \\cdot (4 - 2^3)}\\]"
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#casting-variables",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#casting-variables",
    "title": "Lecture 4",
    "section": "Casting Variables",
    "text": "Casting Variables\n\n\norig_number = 4.39898498\ntype(orig_number)\n\nmod_number = int(orig_number)\nmod_number\ntype(mod_number)\n\n\n\nSometimes we need to explicitly cast a value from one type to another.\n\nWe can do this using built-in functions like str(), int(), and float().\nIf we try these, Python will do its best to interpret the input and convert it to the output type we‚Äôd like and, if they can‚Äôt, the code will throw a great big error."
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#tuples-and-immutability",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#tuples-and-immutability",
    "title": "Lecture 4",
    "section": "Tuples and (im)mutability",
    "text": "Tuples and (im)mutability\n\n\nA tuple is an object that is defined by parentheses and entries that are separated by commas, for example (15, 20, 32). (They are of type tuple.)\nTuples are immutable, while lists are mutable.\nImmutable objects, such as tuples and strings, can‚Äôt have their elements changed, appended, extended, or removed.\n\nMutable objects, such as lists, can do all of these things.\n\nIn everyday programming, we use lists and dictionaries more than tuples."
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#dictionaries",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#dictionaries",
    "title": "Lecture 4",
    "section": "Dictionaries",
    "text": "Dictionaries\ncities_to_temps = {\"Paris\": 28, \"London\": 22, \"New York\": 36, \"Seoul\": 29}\n\ncities_to_temps.keys()\ncities_to_temps.values()\ncities_to_temps.items()\n\nAnother built-in Python type that is enormously useful is the dictionary.\n\nThis provides a mapping one set of variables to another (either one-to-one or many-to-one).\nIf you need to create associations between objects, use a dictionary.\n\nWe can obtain keys, values, or key-value paris from dictionaries."
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#running-on-empty",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#running-on-empty",
    "title": "Lecture 4",
    "section": "Running on Empty",
    "text": "Running on Empty\n\nBeing able to create empty containers is sometimes useful, especially when using loops.\nThe commands to create empty lists, tuples, dictionaries, and sets are lst = [], tup=(), dic={}, and st = set() respectively.\nQ. What is the type of an empty list?"
  },
  {
    "objectID": "danl-lec/danl-299-lec-04-2025-0908.html#google-colab-settings",
    "href": "danl-lec/danl-299-lec-04-2025-0908.html#google-colab-settings",
    "title": "Lecture 4",
    "section": "Google Colab Settings",
    "text": "Google Colab Settings\nTurn off AI Assistance\n\nOn Google Colab\n\nFrom the top-right corner, click ‚öôÔ∏è\nClick ‚ÄúAI Assistance‚Äù from the side menu.\nDisable all options."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#why-data-analytics",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#why-data-analytics",
    "title": "Lecture 2",
    "section": "Why Data Analytics?",
    "text": "Why Data Analytics?\n\nFill in the gaps left by traditional business and economics classes.\n\nPractical skills that will benefit your future career.\nNeglected skills like how to actually find datasets in the wild and clean them.\n\nData analytics skills are largely distinct from (and complementary to) the core quantitative works familiar to business undergrads.\n\nData visualization, cleaning and wrangling; databases; machine learning; etc.\n\nIn short, we will cover things that I wish someone had taught me when I was undergraduate."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#you-at-the-end-of-this-course",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#you-at-the-end-of-this-course",
    "title": "Lecture 2",
    "section": "You, at the end of this course",
    "text": "You, at the end of this course"
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#why-data-analytics-1",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#why-data-analytics-1",
    "title": "Lecture 2",
    "section": "Why Data Analytics?",
    "text": "Why Data Analytics?\n\nData analysts use analytical tools and techniques to extract meaningful insights from data.\n\nSkills in data analytics are also useful for business analysts, market analysts, financial analysts, human resource analysts, or economists.\n\nBreau of Labor Statistics forecasts that the projected growth rate of the employment in the industry related to data analytics from 2021 to 2031 is 36%.\n\nThe average growth rate for all occupations is 5%."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#why-r-python-and-databases",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#why-r-python-and-databases",
    "title": "Lecture 2",
    "section": "Why R, Python, and Databases?",
    "text": "Why R, Python, and Databases?"
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#why-r-python-and-databases-1",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#why-r-python-and-databases-1",
    "title": "Lecture 2",
    "section": "Why R, Python, and Databases?",
    "text": "Why R, Python, and Databases?\nStack Overflow Trends\n\n\nStack Overflow is the most popular Q & A website specifically for programmers and software developers in the world.\nSee how programming languages have trended over time based on use of their tags in Stack Overflow from 2008 to 2023.\n\n\n\n\nMost Popular Languagues\n\n\nData Science and Big Data"
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#data-analytics-and-generative-artificial-intelligence-ai",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#data-analytics-and-generative-artificial-intelligence-ai",
    "title": "Lecture 2",
    "section": "Data Analytics and Generative Artificial Intelligence (AI)",
    "text": "Data Analytics and Generative Artificial Intelligence (AI)\n\n\nData Analytics and Big Data Trend\nFrom 2008 to 2025\n\n\nProgrammers in 2025"
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#data-analytics-and-generative-ai",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#data-analytics-and-generative-ai",
    "title": "Lecture 2",
    "section": "Data Analytics and Generative AI",
    "text": "Data Analytics and Generative AI\n\nGenerative AI refers to a category of AI that is capable of generating new content, ranging from text, images, and videos to music and code.\n\n\n\nIn the early 2020s, advances in transformer-based deep neural networks enabled a number of generative AI systems notable for accepting natural language prompts as input.\n\nThese include large language model (LLM) chatbots (e.g., ChatGPT, Claude, Gemini, Copilot, Grok).\n\nChatGPT (Chat Generative Pre-trained Transformer) is a chatbot developed by OpenAI and launched on November 30, 2022.\n\nBy January 2023, it had become what was then the fastest-growing consumer software application in history."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#data-analytics-and-generative-ai-1",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#data-analytics-and-generative-ai-1",
    "title": "Lecture 2",
    "section": "Data Analytics and Generative AI",
    "text": "Data Analytics and Generative AI\n\nUsers around the world have explored how to best utilize GPT for writing essays and programming codes.\n\n\n\n\nIs AI a threat to data analytics?\n\nFundamental understanding of the subject matter is still crucial for effectively utilizing AI‚Äôs capabilities.\n\n\n\n\n\nIf you use Generative AI such as ChatGPT, please try to understand what ChatGPT gives you.\n\nCopying and pasting it without any understanding harms your learning opportunity."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-r",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-r",
    "title": "Lecture 2",
    "section": "What is R?",
    "text": "What is R?\n\nR is a programming language and software environment designed for statistical computing and graphics.\nR has become a major tool in data analysis, statistical modeling, and visualization.\n\nIt is widely used among statisticians and data scientists for developing statistical software and performing data analysis.\nR is open source and freely available."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-rstudio",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-rstudio",
    "title": "Lecture 2",
    "section": "What is RStudio?",
    "text": "What is RStudio?\n\nRStudio is an integrated development environment (IDE) for R.\n\nAn IDE is a software application that provides comprehensive facilities (e.g., text code editor, graphical user interface (GUI)) to computer programmers for software development.\n\nRStudio is a user-friendly interface that makes using R easier and more interactive.\n\nIt provides a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging, and workspace management.\n\nWe will use a free cloud version of RStudio, which is Posit Cloud."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-python",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-python",
    "title": "Lecture 2",
    "section": "What is Python?",
    "text": "What is Python?\n\nPython is a versatile programming language known for its simplicity and readability.\nPython has become a dominant tool in various fields including data analysis, machine learning, and web development.\n\nIt is widely used among developers, data scientists, and researchers for building applications and performing data-driven tasks.\nPython is open source and has a vast ecosystem of libraries and frameworks."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-jupyter",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-jupyter",
    "title": "Lecture 2",
    "section": "What is Jupyter?",
    "text": "What is Jupyter?\n\nJupyter is an open-source integrated development environment (IDE) primarily for Python, though it supports many other languages.\n\nJupyter provides a notebook interface that allows users to write and execute code in a more interactive and visual format.\n\nJupyter Notebook is a user-friendly environment that enhances coding, data analysis, and visualization.\n\nIt offers a web-based interface that combines live code, equations, visualizations, and narrative text.\nJupyter is widely used for data science, machine learning, and research, enabling easy sharing and collaboration.\n\nYou can use a free cloud version of Jupyter, which is Google Colab.\n\nGoogle Colab can be used for R as well."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#python-vs.-r",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#python-vs.-r",
    "title": "Lecture 2",
    "section": "Python vs.¬†R",
    "text": "Python vs.¬†R"
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-git",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-git",
    "title": "Lecture 2",
    "section": "What is Git?",
    "text": "What is Git?\n\n\n\n\n\\(\\quad\\)\n\nGit is the most popular version control tool for any software development.\n\nIt tracks changes in a series of snapshots of the project, allowing developers to revert to previous versions, compare changes, and merge different versions.\nIt is the industry standard and ubiquitous for coding collaboration."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-github",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-github",
    "title": "Lecture 2",
    "section": "What is GitHub?",
    "text": "What is GitHub?\n\nGitHub is a web-based hosting platform for Git repositories to store, manage, and share code.\nOur course website is hosted on a GitHub repository.\nCourse contents will be posted not only in Brightspace but also in my GitHub repositories (‚Äúrepos‚Äù).\nGithub is useful for many reasons, but the main reason is how user friendly it makes uploading and sharing code."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-github-1",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#what-is-github-1",
    "title": "Lecture 2",
    "section": "What is GitHub?",
    "text": "What is GitHub?"
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-1",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-1",
    "title": "Lecture 2",
    "section": "Installing the Tools",
    "text": "Installing the Tools\nAnaconda\n\nTo install Anaconda, go to the following download page:\n\nhttps://www.anaconda.com/products/distribution.\nClick the ‚ÄúDownload‚Äù button."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-2",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-2",
    "title": "Lecture 2",
    "section": "Installing the Tools",
    "text": "Installing the Tools\nR programming\n\nThe R language is available as a free download from the R Project website at:\n\nWindows: https://cran.r-project.org/bin/windows/base/\nMac: https://cran.r-project.org/bin/macosx/\nDownload the file of R that corresponds to your Mac OS (Big Sur, Apple silicon arm64, High Sierra, El Capitan, Mavericks, etc.)"
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-3",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-3",
    "title": "Lecture 2",
    "section": "Installing the Tools",
    "text": "Installing the Tools\nR Studio\n\n\nThe RStudio Desktop is available as a free download from the following webpage:\n\nhttps://www.rstudio.com/products/rstudio/download/#download\n\n\n\n\n\n\nFor Mac users, try the following steps:\n\nRun RStudio-*.dmg file.\nFrom the Pop-up menu, click the RStudio icon.\nWhile clicking the RStudio icon, drag it to the Applications directory."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-4",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-4",
    "title": "Lecture 2",
    "section": "Installing the Tools",
    "text": "Installing the Tools\nRStudio Environment\n\n\n\n\n\nScript Pane is where you write R commands in a script file that you can save.\n\n\n\nAn R script is simply a text file containing R commands.\nRStudio will color-code different elements of your code to make it easier to read.\n\n\n\n\n\n\n\n\nTo open an R script,\n\nFile \\(&gt;\\) New File \\(&gt;\\) R Script\n\n\n\n\n\n\nTo save the R script,\n\nFile \\(&gt;\\) Save"
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-5",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-5",
    "title": "Lecture 2",
    "section": "Installing the Tools",
    "text": "Installing the Tools\nRStudio Environment\n\n\n\n\n\nConsole Pane allows you to interact directly with the R interpreter and type commands where R will immediately execute them."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-6",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-6",
    "title": "Lecture 2",
    "section": "Installing the Tools",
    "text": "Installing the Tools\nRStudio Environment\n\n\n\n\n\nEnvironment Pane is where you can see the values of variables, data frames, and other objects that are currently stored in memory.\nType below in the Console Pane, and then hit Enter:\n\na &lt;- 1"
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-7",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-7",
    "title": "Lecture 2",
    "section": "Installing the Tools",
    "text": "Installing the Tools\nRStudio Environment\n\n\n\n\n\nPlots Pane contains any graphics that you generate from your R code."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-8",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-8",
    "title": "Lecture 2",
    "section": "Installing the Tools",
    "text": "Installing the Tools\nR Packages and tidyverse\n\nR packages are collections of R functions, compiled code, and data that are combined in a structured format.\n\n\n\nThe tidyverse is a collection of R packages designed for data science that share an underlying design philosophy, grammar, and data structures.\n\nThe tidyverse packages work harmoniously together to make data manipulation, exploration, and visualization more.\nWe will use several R packages from tidyverse throughout the course. (e.g., ggplot2, dplyr, tidyr)"
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-9",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-9",
    "title": "Lecture 2",
    "section": "Installing the Tools",
    "text": "Installing the Tools\nInstalling R packages with install.packages(\"packageName\")\n\nR packages can be easily installed from within R using functions install.packages(\"packageName\").\n\nTo install the R package tidyverse, type and run the following from R console:\n\n\n\ninstall.packages(\"tidyverse\")\n\nWhile running the above codes, you may encounter the question below from the R Console:\n\n\n\n\nMac: ‚ÄúDo you want to install from sources the packages which need compilation?‚Äù from Console Pane.\n\n\n\nWindows: ‚ÄúWould you like to use a personal library instead?‚Äù from Pop-up message.\n\n\n\n\nType no in the R Console, and then hit Enter."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-10",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-10",
    "title": "Lecture 2",
    "section": "Installing the Tools",
    "text": "Installing the Tools\nLoading R packages with library(packageName)\n\nOnce installed, a package is loaded into an R session using library(packageName) so that its functions and data can be used.\n\nTo load the R package tidyverse, type and run the following command from a R script:\n\n\nlibrary(tidyverse)\ndf_mpg &lt;- mpg\n\n\nmpg is the data.frame provided by the R package ggplot2, one of the R pakcages in tidyverse."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-11",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#installing-the-tools-11",
    "title": "Lecture 2",
    "section": "Installing the Tools",
    "text": "Installing the Tools\nRStudio Options Setting\n\n\n\n\n\nThis option menu is found by menus as follows:\n\nTools \\(&gt;\\) Global Options\n\nCheck the boxes as in the left.\nChoose the option Never for  Save workspace to .RData on exit:"
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#building-a-personal-website-on-github",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#building-a-personal-website-on-github",
    "title": "Lecture 2",
    "section": "Building a Personal Website on GitHub",
    "text": "Building a Personal Website on GitHub\n\nFollow steps described in Classwork 1."
  },
  {
    "objectID": "danl-lec/danl-299-lec-02-2025-0827.html#lets-practice-markdown",
    "href": "danl-lec/danl-299-lec-02-2025-0827.html#lets-practice-markdown",
    "title": "Lecture 2",
    "section": "Let‚Äôs Practice Markdown!",
    "text": "Let‚Äôs Practice Markdown!\n\nJupyter Notebook, Quarto, and GitHub-based Discussion Boards use markdown as its underlying document syntax.\nLet‚Äôs do Classwork 2."
  },
  {
    "objectID": "danl-rw/danl-299-project.html#esg_proj_2024_data",
    "href": "danl-rw/danl-299-project.html#esg_proj_2024_data",
    "title": "Unifying Environmental, Social, and Governance (ESG) Metrics with Financial Analysis",
    "section": "1. esg_proj_2024_data",
    "text": "1. esg_proj_2024_data\n\nThe esg_proj_2024_data DataFrame which provides a list of companies and associated information, including ESG scores.\n\n\nimport pandas as pd\nurl_2024 = \"https://bcdanl.github.io/data/esg_proj_2024_data.csv\"\nesg_proj_2024_data = pd.read_csv(url_2024)\n\n\n\n\n  \n\n\n\n\nVariable Description\n\nSymbol: a company‚Äôs ticker;\nCompany Name: a company name;\nSector: a sector a company belongs to;\nIndustry: an industry a company belongs to;\nCountry: a country a company belongs to;\nMarket_Cap: a company‚Äôs market capitalization as of December 20, 2024 (Source: Nasdaq‚Äôs Stock Screener).\n\nA company‚Äôs market capitalization is the value of the company that is traded on the stock market, calculated by multiplying the total number of shares by the present share price.\n\nIPO_Year: the year a company first went public by offering its shares to be traded on a stock exchange.\nTotal_ESG: The overall ESG (Environmental, Social, and Governance) risk score, summarizing the company‚Äôs exposure to ESG-related risks as of March 31, 2024. A lower score indicates lower risk.\nEnvironmental: The company‚Äôs exposure to environmental risks (e.g., emissions, energy use, environmental policy) as of March 31, 2024. A lower score indicates lower risk.\nSocial: The company‚Äôs exposure to social risks (e.g., labor practices, human rights, diversity, and customer relations) as of March 31, 2024. A lower score indicates lower risk.\nGovernance: The company‚Äôs exposure to governance-related risks (e.g., board structure, executive pay, shareholder rights, transparency) as of March 31, 2024. A lower score indicates lower risk.\nControversy: A score reflecting the severity of recent ESG-related controversies involving the company as of March 31, 2024. Higher scores typically indicate greater or more serious controversies."
  },
  {
    "objectID": "danl-rw/danl-299-project.html#esg_proj_2025",
    "href": "danl-rw/danl-299-project.html#esg_proj_2025",
    "title": "Unifying Environmental, Social, and Governance (ESG) Metrics with Financial Analysis",
    "section": "2. esg_proj_2025",
    "text": "2. esg_proj_2025\n\nThe esg_proj_2025 DataFrame provides a list of companies and associated information.\n\n\nurl_2025 = \"https://bcdanl.github.io/data/esg_proj_2025.csv\"\nesg_proj_2025 = pd.read_csv(url_2025)\n\n\n\n\n  \n\n\n\n\nVariable Description\n\nMarket_Cap: a company‚Äôs market capitalization as of March 29, 2025."
  },
  {
    "objectID": "danl-rw/danl-299-project.html#stock_history_2023",
    "href": "danl-rw/danl-299-project.html#stock_history_2023",
    "title": "Unifying Environmental, Social, and Governance (ESG) Metrics with Financial Analysis",
    "section": "3. stock_history_2023",
    "text": "3. stock_history_2023\n\nThe stock_history_2023 DataFrame contains daily historical stock market data for the year 2023.\n\n\nurl = \"https://bcdanl.github.io/data/stock_history_2023.csv\"\nstock_history_2023 = pd.read_csv(url)\n\n\n\n\n  \n\n\n\nVariable Description\n\nSymbol: Company‚Äôs stock ticker\nDate: Trading date\nYear: Trading year\nOpen: Opening price on the date\nHigh: Highest price on the date\nLow: Lowest price on the date\nClose: Closing price on the date\nVolume: Trading volume\nDividend: Cash dividend paid per share on the date (if any), as reported by Yahoo Finance\nStock_Split: The ratio of any stock split that occurred on the given date."
  },
  {
    "objectID": "danl-rw/danl-299-project.html#data-collection",
    "href": "danl-rw/danl-299-project.html#data-collection",
    "title": "Unifying Environmental, Social, and Governance (ESG) Metrics with Financial Analysis",
    "section": "1. Data Collection",
    "text": "1. Data Collection\nFor data collection, include only the companies that are common to both the esg_proj_2024_data and esg_proj_2025 DataFrames.\n\nScraping web data falls into a legal gray area. In the U.S., scraping publicly available information is not illegal, but it is not always clearly allowed either.\n\nMost companies do not go after individuals for minor or non-commercial violations of their Terms of Service (ToS). Still, if the scraping causes harm, it can lead to legal trouble.\n\nTips for Collecting Data from Yahoo! Finance:\n\nScrape at a reasonable and moderate rate. To avoid overloading servers, use time.sleep(random.uniform(5, y)) between page visits.\nThe method of explicit waits are not required, but they are helpful for ensuring elements load before scraping.\nBe aware that some companies may not have data available for Environmental, Social, or Governance Risk Scores, or Controversy Level.\nConsider starting with the following setup for Selenium web-scrapping\n\n\n# %%\n# =============================================================================\n# Setup libraries\n# =============================================================================\nimport time\nimport random\nimport pandas as pd\nimport os\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# %%\n# =============================================================================\n# Setup working directory\n# =============================================================================\nwd_path = 'PATHNAME_OF_YOUR_WORKING_DIRECTORY'\nos.chdir(wd_path)\n\n\n# %%\n# =============================================================================\n# Setup WebDriver with options\n# =============================================================================\noptions = Options()\noptions.add_argument(\"window-size=1400,1200\")  # Set window size\noptions.add_argument('--disable-blink-features=AutomationControlled')  # Prevent detection of automation by disabling blink features\noptions.page_load_strategy = 'eager'  # Load only essential content first, skipping non-critical resources\n\ndriver = webdriver.Chrome(options=options)\n\n\na. ESG Data\n\nFor each company in the esg_proj_2025 DataFrame, employ the Python selenium library to gather ESG Risk Ratings, along with the Controversy Level from the Sustainability section of each company‚Äôs webpage on Yahoo! Finance, such as:\n\nApple Inc.¬†(AAPL)\nMicrosoft Corporation (MSFT)\n\n\n\n\n\nb. Historical Stock Data\n\nFor each company found in both the esg_proj_2024_data and esg_proj_2025 DataFrames, employ the selenium library to retrieve:\n\nDaily stock prices from January 1, 2024, to March 31, 2025\n\ne.g., https://finance.yahoo.com/quote/MSFT/history/?p=MSFT&period1=1704067200&period2=1743446400\n1704067200 = January 1, 2024\n1743446400 = March 31, 2025\n\n\nNote: GOOGLEFINANCE function in Google Sheets is freely available for retrieving current or historical stock data.\n\nAlthough our course does not cover Google Sheets, you are welcome to use it to collect historical stock data if you prefer.\nIf you choose Google Sheets‚Äô GOOGLEFINANCE() for collecting historical stock data, please share your Google Sheets with Prof.¬†Choe.\n\n\n\n\nDividend Cleaning\nIf you scrape historical data tables from each company‚Äôs page on Yahoo Finance (e.g., MSFT Historical Data), you can construct a DataFrame similar to the df_all DataFrame shown below.\nThe df_all DataFrame contains stock data for Apple Inc., Microsoft, and Nvidia from the beginning of 2024 through the end of Q1 2025:\nimport pandas as pd\ndf_all = pd.read_csv('https://bcdanl.github.io/data/aapl_msft_nvda_2024_2025.csv')\n\n\n\n  \n\n\nNote that some rows in the df_all DataFrame include dividend declarations rather than price and volume data (e.g., Apple Inc.¬†on February 10, 2025; Microsoft on February 20, 2025). These dividend entries appear in the Open/High/Low/Close/Adj Close/Volume columns as strings like ‚Äú0.25 Dividend‚Äù.\n\nNote: Apple Inc‚Äôs ‚Äú0.25 Dividend‚Äù means that on that specific date, Apple Inc issued a cash dividend of $0.01 per share.\n\nTo separate these dividend entries from the actual stock trading data, we use the str.contains() method:\n# Filter rows where the 'Open' column contains the word 'Dividend' (these represent dividend entries)\ndf_dividend = df_all[df_all['Open'].str.contains('Dividend', na=False)]\n\n# Filter out dividend rows to keep only stock price data\ndf_stock = df_all[~df_all['Open'].str.contains('Dividend', na=False)]\n\nAt this point:\n\ndf_stock does not include dividend announcements.\ndf_dividend includes only dividend announcements.\n\n\nWe now clean and format the dividend information:\n# Select only relevant columns for dividend data\ndf_dividend = df_dividend[['Date', 'Symbol', 'Open']]\n\n# Copy 'Open' column (which contains dividend information) into a new column named 'Dividend'\ndf_dividend['Dividend'] = df_dividend['Open']\n\n# Keep only the necessary columns: Date, Symbol, and Dividend\ndf_dividend = df_dividend[['Date', 'Symbol', 'Dividend']]\n\n# Remove the text \" Dividend\" from the Dividend column to isolate the numeric value\ndf_dividend['Dividend'] = df_dividend['Dividend'].str.replace(' Dividend', '')\n\n\n\nStock Split Cleaning\nSimilarly, some row in the df_stock DataFrame from the ‚ÄúDividend Cleaning‚Äù subsection includes stock splits rather than price and volume data (e.g., Nvidia on June 10, 2024). These stock split entries appear in the Open/High/Low/Close/Adj Close/Volume columns as strings like ‚Äú10:1 Stock Splits‚Äù.\nTo separate these stock split entries from the actual stock trading data, again we use the str.contains() method:\n# Filter rows where the 'Open' column contains the word 'Split' (these represent stock split entries)\ndf_split = df_stock[df_stock['Open'].str.contains('Split', na=False)]\n\n# Filter out dividend rows to keep only stock price data\ndf_stock = df_stock[~df_stock['Open'].str.contains('Split', na=False)]\n\nAt this point:\n\ndf_stock includes only daily stock trading information.\ndf_split includes only stock splits.\n\n\nWe now clean and format the split information:\n# Select only relevant columns for dividend data\ndf_split = df_split[['Date', 'Symbol', 'Open']]\n\n# Copy 'Open' column (which contains dividend information) into a new column named 'Split'\ndf_split['Split'] = df_split['Open']\n\n# Keep only the necessary columns: Date, Symbol, and Split\ndf_split = df_split[['Date', 'Symbol', 'Split']]\n\n# Remove the text \" Stock Splits\" from the Split column to isolate the numeric value\ndf_split['Split'] = df_split['Split'].str.replace(' Stock Splits', '')\n\nNote: NVDA‚Äôs ‚Äú10:1 Stock Split‚Äù means that each existing share was split into 10 shares.\n\nIf you owned 1 share before June 10, 2024, you would own 10 shares after the split.\nTo maintain consistency, Yahoo Finance retroactively adjusts all historical prices and volumes to reflect stock splits.\n\nFor example, the table below shows NVDA‚Äôs adjusted stock prices and volumes from June 7‚Äì11, 2024:\n\n\n\n\n  \n\n\n\n\n\nExtracting the year from a datetime variable\n\nTo extract the year from a datetime variable in a pandas DataFrame, you can use the .dt.year accessor.\n\n# Sample DataFrame with string dates\ndata = {\n    'Symbol': ['AAPL', 'MSFT', 'GOOG'],\n    'Date': ['2024-12-29', '2024-12-30', '2025-01-03'],\n    'Close': [130.21, 265.78, 122.34]\n}\n\ndf = pd.DataFrame(data)\n\n# Convert 'Date' column to datetime\ndf['Date'] = df['Date'].astype('datetime64[ns]')\n\n# Extract year from 'Date' variable\ndf['Year'] = df['Date'].dt.year"
  },
  {
    "objectID": "danl-rw/danl-299-project.html#data-analysis",
    "href": "danl-rw/danl-299-project.html#data-analysis",
    "title": "Unifying Environmental, Social, and Governance (ESG) Metrics with Financial Analysis",
    "section": "2. Data Analysis",
    "text": "2. Data Analysis\n\nIf you are unable to complete the data collection tasks, please use the esg_proj_2024_data and stock_history_2023 DataFrames for your data analysis.\nIf you successfully completed the data collection tasks, you may ‚Äúoptionally‚Äù incorporate the stock_history_2023 DataFrame into your analysis as an additional data source.\nBelow are the key components in the data analysis webpage.\n\nTitle: A clear and concise title that gives an idea of the project topics.\nIntroduction:\n\nBackground: Provide context for the research questions, explaining why they are significant, relevant, or interesting.\nStatement of the Problem: Clearly articulate the specific problem or issue the project will address.\n\nData Collection: Use a Python script (*.py) to write the code and the comment on how to retrieve ESG data and historical stock data using Python selenium.\n\nDo NOT provide your code for data collection in your webpage. You should submit your Python script for data collection to Brightspace.\n\nDescriptive Statistics\n\n\nProvide both grouped and un-grouped descriptive statistics and distribution plots for the ESG data and the finance/accounting data\nOptionally, provide correlation heat maps using corr() and seaborn.heatmap(). Below provides the Python code for creating a correlation heatmap.\n\n\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Sample DataFrame with varied correlations\ndata = {\n    'Revenue': [100, 200, 300, 400, 500],  \n    'Profit': [20, 40, 60, 80, 100],       \n    'n_Employee': [50, 45, 40, 35, 30], \n    'n_Customer': [10, 11, 12, 13, 14]  \n}\n\n# Create a DataFrame from the dictionary\ndf = pd.DataFrame(data)\n\n# Calculate the correlation matrix of the DataFrame\ncorr = df.corr()\n\n# Set up the matplotlib figure size\nplt.figure(figsize=(8, 6))\n\n# Generate a heatmap in seaborn:\n# - 'corr' is the correlation matrix\n# - 'annot=True' enables annotations inside the squares with the correlation values\n# - 'cmap=\"coolwarm\"' assigns a color map from cool to warm (blue to red)\n# - 'fmt=\".2f\"' formats the annotations to two decimal places\n# - 'linewidths=.5' adds lines between each cell\nsns.heatmap(corr, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=.5)\n\n# Title of the heatmap\nplt.title('Correlation Heatmap with Varied Correlations')\n\n# Display the heatmap\nplt.show()\n\n\n\n\n\nExploratory Data Analysis:\n\nExplore the trend of ESG scores from 2024 to 2025.\nAdditionally, list the questions you aim to answer.\nAddress the questions through data visualization with seaborn (or lets-plot) and pandas methods and attributes.\n\nSignificance of the Project:\n\nExplain its implications for real-world applications, business strategies, or public policy.\n\nReferences\n\nList all sources cited in the project.\nLeave a web address of the reference if that is from the web.\nIndicate if the code and the write-up are guided by generative AI, such as ChatGPT. There will be no penalties on using any generative AI.\nClearly state if the code and the write-up result from collaboration with colleagues. There will be no penalties for collaboration, provided that the shared portions are clearly indicated."
  },
  {
    "objectID": "danl-rw/danl-299-project.html#interpreting-esg-data-on-yahoo-finance",
    "href": "danl-rw/danl-299-project.html#interpreting-esg-data-on-yahoo-finance",
    "title": "Unifying Environmental, Social, and Governance (ESG) Metrics with Financial Analysis",
    "section": "Interpreting ESG Data on Yahoo Finance üßæ",
    "text": "Interpreting ESG Data on Yahoo Finance üßæ\nIn Yahoo Finance, the ESG data helps investors evaluate a company‚Äôs sustainability profile and exposure to long-term environmental, social, and governance risks. Here‚Äôs how to interpret each metric:\n\nüî¢ Total ESG Risk Score\n\nWhat it means: A composite score reflecting the company‚Äôs overall exposure to ESG-related risks.\nHow to interpret:\n\nLower score = lower risk ‚Üí Better ESG performance.\n\nHigher score = higher risk ‚Üí More vulnerable to ESG-related issues.\n\nExample: A company with total_ESG = 15 is considered to have lower ESG risk than one with total_ESG = 30.\n\n\n\n\nüåç Environmental Risk Score\n\nWhat it measures: Exposure to environmental risks such as:\n\nCarbon emissions\n\nEnergy efficiency\n\nWaste management\n\nClimate change strategy\n\n\nInterpretation:\n\nLower score ‚Üí better environmental practices.\nHigher score ‚Üí more environmental liabilities or poor sustainability measures.\n\n\n\n\nüë• Social Risk Score\n\nWhat it measures: Exposure to social risks, including:\n\nLabor practices\n\nHuman rights\n\nInclusive culture and representation\nCustomer and community relations\n\n\nInterpretation:\n\nLower score = better social responsibility.\nHigher score = more risk from labor issues, PR problems, etc.\n\n\n\n\nüèõ Governance Risk Score\n\nWhat it measures: Exposure to governance-related risks, such as:\n\nBoard structure and independence\n\nExecutive compensation\n\nShareholder rights\n\nTransparency and ethics\n\n\nInterpretation:\n\nLower score suggests better corporate oversight.\nHigher score suggests poor governance structures.\n\n\n\n\nüö® Controversy Level\n\nWhat it measures: Reflects recent ESG-related controversies involving the company.\nScale: Usually ranges from 0 (no controversies) to 5 (severe and ongoing issues).\nInterpretation:\n\nLow score (0‚Äì1): Minimal or no controversies.\nHigh score (4‚Äì5): Major controversies ‚Äî potential reputational or legal risks.\nNote: A company may have good ESG scores but still be flagged due to a high controversy score.\n\n\n\n\nüß† ESG Score Summary\n\n\n\nMetric\nGood Score\nBad Score\n\n\n\n\ntotal_ESG\nLow\nHigh\n\n\nEnvironmental\nLow\nHigh\n\n\nSocial\nLow\nHigh\n\n\nGovernance\nLow\nHigh\n\n\nControversy\n0‚Äì1\n4‚Äì5"
  },
  {
    "objectID": "danl-rw/danl-299-project.html#general-tips-on-data-visualization",
    "href": "danl-rw/danl-299-project.html#general-tips-on-data-visualization",
    "title": "Unifying Environmental, Social, and Governance (ESG) Metrics with Financial Analysis",
    "section": "General Tips on Data Visualization üìà",
    "text": "General Tips on Data Visualization üìà\n\nDistribution\nWhen describing the distribution of a variable, we are typically interested in several key characteristics:\n\nCenter: The central tendency of the data, such as the mean or median, which indicates the typical or average value.\nSpread: How spread the values are within the variable, showing the range and standard deviation of values.\nCommon Values: Identifying frequent values and the mode.\nRare Values: Recognizing unusual or infrequent values.\nShape: The overall shape of the distribution, such as whether it‚Äôs symmetric, skewed left or right, or having multiple groups with multiple peaks.\n\n\n\n\n\n\n\n\n\nRelationship Between Two Variables\n\nStart with determining whether the two variables have a positive association, a negative association, or no association.\n\n\nE.g., A negative slope in the fitted line indicates that sales decrease as the price increases, while a positive slope would indicate that sales increase with price. A zero slope means that there is no relationship between sales and price; changes in price do not affect sales.\n\n\n\n\n\n\n\n\nInput on the x-axis; output on the y-axis\n\n\nBy convention, the input (or predictor) variable is plotted on the x-axis, and the output (or response) variable on the y-axis.\nThis helps visualize potential relationships‚Äîthough it shows correlation, not necessarily causation.\nCorrelation does not necessarily mean causation.\n\n\nWhen a question asks you to describe how the relationship varies by another categorical variable, examine both the direction of the slope (negative, positive, or none) from the fitted line and the steepness of the slope (steep or shallow).\n\n\nThe slope of the fitted straight line is the rate at which the ‚Äúy‚Äù variable (like grades) changes as the ‚Äúx‚Äù variable (like study hours) changes. In simple terms, it shows how much one thing goes up or down when the other thing changes.\nFor example, a comment such as, ‚ÄúThe plot shows a negative relationship between sales and price‚Äù does not address how the relationship differs by brand.\n\n\nThe focus is on the relationship, not the distribution.\n\n\nWhile adding a comment on the distribution of a single variable can be helpful, the question is primarily about the relationship between the two variables.\n\n\n\n\nTime Trend of a Variable\nHere are some general tips for describing the time trend of a variable:\n\nStart with Identifying the Overall Trend\n\n\nLook for the general direction of the trend over time.\n\nIs it moving upward, downward, or remaining relatively constant?\n\n\n\nNote Patterns and Cycles\n\n\nIdentify any repeating patterns, such as seasonal fluctuations (e.g., monthly or quarterly changes) or long-term cycles.\n\nThese can reveal consistent influences that affect the variable over time.\n\n\n\nHighlight Any Significant Fluctuations\n\n\nDescribe any sharp increases, decreases, or irregular spikes in the data.\n\n\n\n\n\n\n\n\n\nInterpreting Visualization\n\nBe specific.\n\nAvoid vague statements. Below examples do not actually explain what the patterns are.\n\n‚ÄúThe plot shows how the time trend of a stock price varies across sectors, with each sector having a unique best fitting line and scatter pattern‚Äù\n‚ÄúThe trend shows the evolution of stock price in the market over time‚Äù\n\nClearly describe what is the pattern‚Äîand how it differs across categories.\n\nAdd Narration:\n\nConnect the visualization to real-world phenomena and/or your idea that could help explain it, adding insight into what is happening."
  },
  {
    "objectID": "danl-rw/danl-299-project.html#project-write-up",
    "href": "danl-rw/danl-299-project.html#project-write-up",
    "title": "Unifying Environmental, Social, and Governance (ESG) Metrics with Financial Analysis",
    "section": "Project Write-up",
    "text": "Project Write-up\n\n\n\n\n\n\n\n\n\n\n\n\nAttribute\nVery Deficient (1)\nSomewhat Deficient (2)\nAcceptable (3)\nVery Good (4)\nOutstanding (5)\n\n\n\n\n1. Quality of research questions\n‚Ä¢ Not stated or very unclear‚Ä¢ Entirely derivative‚Ä¢ Anticipate no contribution\n‚Ä¢ Stated somewhat confusingly‚Ä¢ Slightly interesting, but largely derivative‚Ä¢ Anticipate minor contributions\n‚Ä¢ Stated explicitly‚Ä¢ Somewhat interesting and creative‚Ä¢ Anticipate limited contributions\n‚Ä¢ Stated explicitly and clearly‚Ä¢ Clearly interesting and creative‚Ä¢ Anticipate at least one good contribution\n‚Ä¢ Articulated very clearly‚Ä¢ Highly interesting and creative‚Ä¢ Anticipate several important contributions\n\n\n2. Quality of data visualization\n‚Ä¢ Very poorly visualized‚Ä¢ Unclear‚Ä¢ Unable to interpret figures\n‚Ä¢ Somewhat visualized‚Ä¢ Somewhat unclear‚Ä¢ Difficulty interpreting figures\n‚Ä¢ Mostly well visualized‚Ä¢ Mostly clear‚Ä¢ Acceptably interpretable\n‚Ä¢ Well organized‚Ä¢ Well thought-out visualization‚Ä¢ Almost all figures clearly interpretable\n‚Ä¢ Very well visualized‚Ä¢ Outstanding visualization‚Ä¢ All figures clearly interpretable\n\n\n3. Quality of exploratory data analysis\n‚Ä¢ Little or no critical thinking‚Ä¢ Little or no understanding of data analytics concepts with Python\n‚Ä¢ Rudimentary critical thinking‚Ä¢ Somewhat shaky understanding of data analytics concepts with Python\n‚Ä¢ Average critical thinking‚Ä¢ Understanding of data analytics concepts with Python\n‚Ä¢ Mature critical thinking‚Ä¢ Clear understanding of data analytics concepts with Python\n‚Ä¢ Sophisticated critical thinking‚Ä¢ Superior understanding of data analytics concepts with Python\n\n\n4. Quality of business/economic analysis\n‚Ä¢ Little or no critical thinking‚Ä¢ Little or no understanding of business/economic concepts\n‚Ä¢ Rudimentary critical thinking‚Ä¢ Somewhat shaky understanding of business/economic concepts\n‚Ä¢ Average critical thinking‚Ä¢ Understanding of business/economic concepts\n‚Ä¢ Mature critical thinking‚Ä¢ Clear understanding of business/economic concepts\n‚Ä¢ Sophisticated critical thinking‚Ä¢ Superior understanding of business/economic concepts\n\n\n5. Quality of writing\n‚Ä¢ Very poorly organized‚Ä¢ Very difficult to read‚Ä¢ Many typos and grammatical errors\n‚Ä¢ Somewhat disorganized‚Ä¢ Somewhat difficult to read‚Ä¢ Numerous typos and grammatical errors\n‚Ä¢ Mostly well organized‚Ä¢ Mostly easy to read‚Ä¢ Some typos and grammatical errors\n‚Ä¢ Well organized‚Ä¢ Easy to read‚Ä¢ Very few typos or grammatical errors\n‚Ä¢ Very well organized‚Ä¢ Very easy to read‚Ä¢ No typos or grammatical errors\n\n\n6. Quality of Jupyter Notebook usage\n‚Ä¢ Very poorly organized‚Ä¢ Many redundant warning/error messages‚Ä¢ Inappropriate code to produce outputs\n‚Ä¢ Somewhat disorganized‚Ä¢ Numerous warning/error messages‚Ä¢ Misses important code\n‚Ä¢ Mostly well organized‚Ä¢ Some warning/error messages‚Ä¢ Provides appropriate code\n‚Ä¢ Well organized‚Ä¢ Very few warning/error messages‚Ä¢ Provides advanced code\n‚Ä¢ Very well organized‚Ä¢ No warning/error messages‚Ä¢ Proposes highly advanced code"
  },
  {
    "objectID": "danl-rw/danl-299-project.html#data-collection-1",
    "href": "danl-rw/danl-299-project.html#data-collection-1",
    "title": "Unifying Environmental, Social, and Governance (ESG) Metrics with Financial Analysis",
    "section": "Data Collection",
    "text": "Data Collection\n\n\n\n\n\n\n\n\n\nEvaluation\nDescription\nCriteria\n\n\n\n\n1 (Very Deficient)\n- Very poorly implemented- Data is unreliable.\n- Poor web scraping practices with selenium, leading to unreliable or incorrect data from Yahoo Finance.- Inadequate use of pandas, resulting in poorly structured DataFrames.\n\n\n2 (Somewhat Deficient)\n- Somewhat effective implementation- Data has minor reliability issues.\n- Basic web scraping with selenium that sometimes fails to capture all relevant data accurately.- Basic use of pandas, but with occasional issues in data structuring.\n\n\n3 (Acceptable)\n- Effective web scraping with selenium, capturing most required data from Yahoo Finance.- Adequate use of pandas to structure data in a mostly logical format.\n\n\n\n4 (Very Good)\n- Well-implemented and organized- Data is reliable.\n- Thorough web scraping with selenium that consistently captures accurate and complete data from Yahoo Finance.- Skillful use of pandas for clear and logical data structuring.\n\n\n5 (Outstanding)\n- Exceptionally implemented- Data is highly reliable.\n- Expert web scraping with selenium, capturing detailed and accurate data from Yahoo Finance without fail.- Expert use of pandas to create exceptionally well-organized DataFrames that facilitate easy analysis."
  },
  {
    "objectID": "danl-cw/danl-299-cw-01.html",
    "href": "danl-cw/danl-299-cw-01.html",
    "title": "Classwork 1",
    "section": "",
    "text": "Getting a GitHub account\nStep 1. Create the GitHub account with your Geneseo email.\n\nGo to GitHub.\nClick ‚ÄúSign up for GitHub‚Äù.\n\n\nChoose your GitHub username carefully:\n\nhttps://USERNAME.github.io will be the address for your website.\nByeong-Hak‚Äôs GitHub username is bcdanl, so that Byeong-Hak owns the web address https://bcdanl.github.io.\n\nIt is recommended to have a username with all lower cases.\n\n\n\n\n\nInstalling git if you do not have one.\nStep 2.\n\nCheck whether git is installed in your laptop.\n\n\nFrom the Console Pane in RStudio, click Terminal tab.\n\n\n\n\n\nFrom the Terminal, run the following command to check if your laptop has git installed.\n\ngit --version\n\nIf your computer has git installed, you will see the message below and you do not need to install git:\n\ngit version 2.xx\n\nIf your computer does not have git installed, you will see the message below and you need to install git:\n\n'git' is not recognized as an internal or external command\n\n\nInstall git if you do not have one. Move to the next step if you have git installed in your laptop.\n\n\n\n\nMac\n\nGo to http://git-scm.com/downloads, and download the file.\nClick ‚ÄúmacOS‚Äù, scroll down the webpage, and then click ‚Äúinstaller‚Äù from the Binary installer section.\nRun the downloaded file.\n\n\n\n\nWindows\n\nGo to https://gitforwindows.org, and download the file.\nRun the downloaded file.\n\n\n\n\n\nKeep clicking ‚ÄúNext‚Äù to complete the installation of git.\nAfter the git installation is done, close RStudio and re-open it.\n\n\nHow to open git installation file on Mac?\n\nRun the downloaded file.\nClick Okay\nGo to ‚ÄúSetting‚Äù &gt; ‚ÄúPrivacy and Security‚Äù\nGo to ‚ÄúGeneral‚Äù or scroll down\nClick ‚ÄúOpen Anyway‚Äù\n\n\n\n\n\n\n\n\nSetting up GitHub Credential on your local Git.\nStep 3. In Terminal, run the following commands one by one:\ngit config --global user.email \"YOUR_EMAIL_ADDRESS\"\ngit config --global user.name \"YOUR_USERNAME\"\nFor example, the email address for my GitHub account is bchoe@geneseo.edu, and my GitHub username is bcdanl, so that I ran below:\ngit config --global user.email \"bchoe@geneseo.edu\"\ngit config --global user.name \"bcdanl\"\n\nStep 4. Obtain a personal access token (PAT) from GitHub.\n\nIn RStudio Console, run the followings line by line:\n\ninstall.packages(\"usethis\")\nusethis::create_github_token()\n\nThen, click ‚ÄúGenerate token‚Äù in the pop-upped web browser.\nWe can think of GitHub‚Äôs personal access token as a password that expires. You can decide how long it remains valid. My recommendation is to set its expiration for May 31, 2025, or later.\n\n\n\n\n\nThen, copy the generated PAT, and paste it to your clipboard or R script.\n\n\nStep 5. Set the GitHub credential using the PAT.\n\nIn RStudio Console, run the followings line by line:\n\ninstall.packages(\"gitcreds\")\ngitcreds::gitcreds_set()\n\nYou will be asked to provide your PAT.\nPaste your PAT to the RStudio Console, and then hit Enter.\n\n\n\n\n\n\n\nNote\n\n\n\n\nIt does not harm to create multiple PAT for one GitHub account.\nAfter the PAT expires, you should repeat the following if you want to update your GitHub website:\n\n\nCreate a new PAT:\n\nusethis::create_github_token()\n\nReplace the current PAT with the new PAT:\n\ngitcreds::gitcreds_set()\n\nSelect the option 2: Replace these credentials by typing 2 and hitting Enter on R Console.\n\n\n\n\n\n\nEstablishing the Connection between GitHub repo and your local Git\nStep 6. Login to your GitHib and make the repository.\n\nFrom https://github.com, click the plus [+] icon in the upper right corner and select ‚ÄúNew repository‚Äù.\nName this repo USERNAME.github.io, which will be the domain for your website.\n\n\ne.g., If your GitHub username is abc9, the name of your repo should be abc9.github.io, not abc_9.github.io.\n\n\nThen, copy the web address of your GitHub repo, https://github.com/USERNAME/USERNAME.github.io\n\n\nFor example, the web address for Byeong-Hak‚Äôs GitHub repo is https://github.com/bcdanl/bcdanl.github.io.\n\n\nStep 7. Create a RStudio project with Version Control\n\n\n\n\nClick ‚ÄúProject (None)‚Äù at the top-right corner in RStudio.\nClick ‚ÄúNew Project‚Äù &gt; ‚ÄúVersion Control‚Äù &gt; ‚ÄúGit‚Äù\nPaste the web address of your GitHub repo to the Repository URL menu.\nClick ‚ÄúBrowse‚Äù to select the parent directory for your local project directory (I recommend ‚ÄúDocuments‚Äù folder.)\nClick ‚ÄúCreate‚Äù\n\n\n\n\n\n\n\nNote\n\n\n\nIf Step 7 does not work on your laptop, try below Steps 7-1 and 7-2 instead. If Step 7 DOES work well, skip Steps 7-1 and 7-2.\n\n\nStep 7-1. Use git clone to establish the connection between GitHub repo and your local laptop:\n\nChange directory to ‚ÄúDocuments‚Äù in Terminal using cd command.\n\ncd &lt;pathname of \"Documents\" directory&gt;\n\nHere, you need to know the pathname of ‚ÄúDocuments‚Äù directory.\nFor example, LAPTOP_USERNAME below is not your GitHub username but one for your local laptop.\n\nMac\ncd /Users/LAPTOP_USERNAME/Documents\nWindows\ncd C:/Users/LAPTOP_USERNAME/Documents\n\nUse git clone to creates a local copy of the GitHub Repository.\n\ngit clone &lt;repository-url&gt;\n\nFor example,\n\ngit clone https://github.com/USERNAME/USERNAME.github.io\n\nStep 7-2. Create a RStudio project from Existing Directory\n\nClick ‚ÄúProject (None)‚Äù at the top-right corner in RStudio.\nClick ‚ÄúNew Project‚Äù &gt; ‚ÄúExisting Directory‚Äù\nClick ‚ÄúBrowse‚Äù to select the local copy of the GitHub Repository\nClick ‚ÄúCreate Project‚Äù\n\n\n\n\nDownloading Website Template Files\nStep 8. Download the files of website template:\n\nGo to the following webpage: https://github.com/bcdanl/danl-website-template\nFrom the webpage above, click the green icon &lt; &gt; Code, and then click ‚ÄúDownload Zip‚Äù\nExtract the Zip file you have downloaded\nIf there are the files, .gitignore, .DS_Store, or *.Rproj, in the folder, delete all of them.\nMove all the files that were compressed in the Zip file to your local project directory, USERNAME.github.io.\n\n\nSelect all the files in the danl-website-template folder (Tip: Ctrl + A (Windows) / command + A (Mac) selects all files in a directory).\nThen, Ctrl + C (Windows) / command + C (Mac) to copy them.\nThen, go to your local project directory USERNAME.github.io.\nThen, Ctrl + V (Windows) / command + V (Mac) to paste them to your local project directory USERNAME.github.io.\n\n\nRemove the danl-website-template directory from your local project directory, if you have one.\n\n\nAll the website files should be located at the same level with the R Project file (USERNAME.github.io.Rproj), shown below.\n\n\n\n\n\n\n\nPushing the Website Files to the GitHub repository\n\n\n\nStep 8. Push the files to your GitHub repository\n\nOn Terminal within RStudio, execute the following 3-step git commands, which will stage, commit, and push all the files in the local working directory to your GitHub repository:\n\n\ngit add . adds changes in your local working directory (e.g., edited files, new files, deleted files) to the staging area, which is a temporary area where you can prepare your next commit\n\ngit add .\n\ngit commit -m \"...\" records the changes in the staging area as a new snapshot in the local working directory, along with a message describing the changes.\n\ngit commit -m \"any message to describe the changes\"\n\ngit push uploads the local changes to the online repository in GitHub.\n\ngit push\n\nStep 9. Check whether the files are well uploaded.\n\nGo to the webpages of your GitHub repository and your website:\n\nhttps://github.com/USERNAME/USERNAME.github.io.git\nhttps://USERNAME.github.io\nRefresh the webpages (Ctrl + R for Windows users; cmd + R for Mac users)\n\nAdd a URL for your website (https://YOUR_GITHUB_USERNAME.github.io/) in About section in your GihtHub repository webpage by clicking the setting. Below describes how to do it:\n\n\n\n\nDiscussion\nWelcome to our Classwork 1 Discussion Board! üëã \nThis space is designed for you to engage with your classmates about the material covered in Classwork 1.\nWhether you are looking to delve deeper into the content, share insights, or have questions about the content, this is the perfect place for you.\nIf you have any specific questions for Byeong-Hak (@bcdanl) regarding the Classwork 1 materials or need clarification on any points, don‚Äôt hesitate to ask here.\nAll comments will be stored here.\nLet‚Äôs collaborate and learn from each other!\n\n\n\n\n Back to top"
  },
  {
    "objectID": "danl-cw/danl-299-cw-02.html",
    "href": "danl-cw/danl-299-cw-02.html",
    "title": "Classwork 2",
    "section": "",
    "text": "Markdown is a lightweight markup language with plain-text formatting syntax. Its main goal is to be readable and easy to write, even when viewed as plain text. Markdown is widely used for creating formatted text on the web and in various applications such as Quarto.\n\n\n\n\nHeadings are created by adding one or more # symbols before your heading text. The number of # symbols indicates the level of the heading.\n# Heading 1\n## Heading 2\n### Heading 3\n\n\n\nYou can make text bold by wrapping it with two asterisks **, and italic by using one asterisk *.\n*italic* or _italic_\n**bold** or __bold__\n\n\n\nUnordered lists are created using *, -, or +, while ordered lists are numbered.\n- Item 1\n- Item 2\n  - Subitem 2.1\n  - Subitem 2.2\n1. First item\n2. Second item\n\n\n\nLinks are created using [Link Text](URL)\n[DANL 210](https://bcdanl.github.io/210)\n\n\n\nImages are created using ![Alt Text](Image URL).\n![Geneseo Logo](https://bcdanl.github.io/img/geneseo-logo.gif)\n\n\n\n\n\n\n&gt; Be yourself. Everyone else is already taken. - Oscar Wilde.\n\n\n\n\nA ton of markdown emojis are available here üòÑ (:smile:)\n\nhttps://github.com/ikatyang/emoji-cheat-sheet\n\n\n\n\n\nCode blocks are created by using triple backticks (```). Optionally, you can specify the language for syntax highlighting.\n```\n\"string\"\n```\n```python\n# Python code block\nimport numpy as np\n```\n\n\n\n\n\nDo the following tasks on this Classwork 2 Discussion Board:\n\nBasic Syntax: Write a comment with a heading, an unordered list, an ordered list, a link, and an image.\nAdvanced Syntax: Write a comment that includes a Python code block, a blockquote, and an emoji.\n\n\n\n\n\n\nQuarto Markdown Basics\nStart writing on GitHub"
  },
  {
    "objectID": "danl-cw/danl-299-cw-02.html#basic-syntax",
    "href": "danl-cw/danl-299-cw-02.html#basic-syntax",
    "title": "Classwork 2",
    "section": "",
    "text": "Headings are created by adding one or more # symbols before your heading text. The number of # symbols indicates the level of the heading.\n# Heading 1\n## Heading 2\n### Heading 3\n\n\n\nYou can make text bold by wrapping it with two asterisks **, and italic by using one asterisk *.\n*italic* or _italic_\n**bold** or __bold__\n\n\n\nUnordered lists are created using *, -, or +, while ordered lists are numbered.\n- Item 1\n- Item 2\n  - Subitem 2.1\n  - Subitem 2.2\n1. First item\n2. Second item\n\n\n\nLinks are created using [Link Text](URL)\n[DANL 210](https://bcdanl.github.io/210)\n\n\n\nImages are created using ![Alt Text](Image URL).\n![Geneseo Logo](https://bcdanl.github.io/img/geneseo-logo.gif)"
  },
  {
    "objectID": "danl-cw/danl-299-cw-02.html#advanced-syntax",
    "href": "danl-cw/danl-299-cw-02.html#advanced-syntax",
    "title": "Classwork 2",
    "section": "",
    "text": "&gt; Be yourself. Everyone else is already taken. - Oscar Wilde.\n\n\n\n\nA ton of markdown emojis are available here üòÑ (:smile:)\n\nhttps://github.com/ikatyang/emoji-cheat-sheet\n\n\n\n\n\nCode blocks are created by using triple backticks (```). Optionally, you can specify the language for syntax highlighting.\n```\n\"string\"\n```\n```python\n# Python code block\nimport numpy as np\n```"
  },
  {
    "objectID": "danl-cw/danl-299-cw-02.html#practice-problems",
    "href": "danl-cw/danl-299-cw-02.html#practice-problems",
    "title": "Classwork 2",
    "section": "",
    "text": "Do the following tasks on this Classwork 2 Discussion Board:\n\nBasic Syntax: Write a comment with a heading, an unordered list, an ordered list, a link, and an image.\nAdvanced Syntax: Write a comment that includes a Python code block, a blockquote, and an emoji."
  },
  {
    "objectID": "danl-cw/danl-299-cw-02.html#references",
    "href": "danl-cw/danl-299-cw-02.html#references",
    "title": "Classwork 2",
    "section": "",
    "text": "Quarto Markdown Basics\nStart writing on GitHub"
  },
  {
    "objectID": "listing-danl-299-cw.html",
    "href": "listing-danl-299-cw.html",
    "title": "DANL 299 - Classwork",
    "section": "",
    "text": "Title\n\n\nSubtitle\n\n\nDate\n\n\n\n\n\n\nClasswork 4\n\n\nPython Basics\n\n\nSeptember 8, 2025\n\n\n\n\nClasswork 3\n\n\nQuarto Website Basics\n\n\nSeptember 4, 2025\n\n\n\n\nClasswork 2\n\n\nMarkdown Basics\n\n\nAugust 27, 2025\n\n\n\n\nClasswork 1\n\n\nBuilding a Personal Website using Git, GitHub, and RStudio with Quarto\n\n\nAugust 25, 2025\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "danl-wk/wk-01.html",
    "href": "danl-wk/wk-01.html",
    "title": "Week 1",
    "section": "",
    "text": "Welcome to DANL 299! üëã\nIn this first week, we will explore what you can expect to learn in this course and review the logistics, including the structure of lectures, classes, and assessments, as well as how we will interact throughout the semester. This week also introduces the framework for building and managing a personal website for data analytics."
  },
  {
    "objectID": "danl-wk/wk-01.html#lecture-slides",
    "href": "danl-wk/wk-01.html#lecture-slides",
    "title": "Week 1",
    "section": "üè´ Lecture Slides",
    "text": "üè´ Lecture Slides\n\nSyllabus\nEither click on the slide area below or click here to view it in fullscreen.\n\n\n\n\n\n\nIntroduction and DANL tools\nEither click on the slide area below or click here to view it in fullscreen.\n\n\n\n\nüé• Looking for lecture recordings? You can only find those on Brightspace."
  },
  {
    "objectID": "danl-wk/wk-01.html#classwork",
    "href": "danl-wk/wk-01.html#classwork",
    "title": "Week 1",
    "section": "‚úçÔ∏è Classwork",
    "text": "‚úçÔ∏è Classwork\nüöß Please complete Classwork 1 to practice building and working with a personal website hosted on GitHub."
  },
  {
    "objectID": "danl-wk/wk-01.html#recommended-reading",
    "href": "danl-wk/wk-01.html#recommended-reading",
    "title": "Week 1",
    "section": "üìö Recommended Reading",
    "text": "üìö Recommended Reading\n\nCheck the end of slides for the list of references cited in the lecture."
  },
  {
    "objectID": "danl-wk/wk-01.html#discussion",
    "href": "danl-wk/wk-01.html#discussion",
    "title": "Week 1",
    "section": "üí¨ Discussion",
    "text": "üí¨ Discussion\nWelcome to our Week 1 Discussion Board! üëã \nThis space is designed for you to engage with your classmates about the material covered in Week 1.\nWhether you are looking to delve deeper into the content, share insights, or have questions about the content, this is the perfect place for you.\nIf you have any specific questions for Byeong-Hak (@bcdanl) or peer classmate (@GitHub-Username) regarding the Week 1 materials or need clarification on any points, don‚Äôt hesitate to ask here.\nLet‚Äôs collaborate and learn from each other!"
  },
  {
    "objectID": "danl-wk/wk-02.html",
    "href": "danl-wk/wk-02.html",
    "title": "Week 2",
    "section": "",
    "text": "In our second week, we will explore Jupyter Notebook and Quarto, along with website management and web communication."
  },
  {
    "objectID": "danl-wk/wk-02.html#lecture-slides",
    "href": "danl-wk/wk-02.html#lecture-slides",
    "title": "Week 2",
    "section": "üè´ Lecture Slides",
    "text": "üè´ Lecture Slides\nEither click on the slide area below or click here to view it in fullscreen.\n\n\n\n\nüé• Looking for lecture recordings? You can only find those on Brightspace."
  },
  {
    "objectID": "danl-wk/wk-02.html#classwork",
    "href": "danl-wk/wk-02.html#classwork",
    "title": "Week 2",
    "section": "‚úçÔ∏è Classwork",
    "text": "‚úçÔ∏è Classwork\nüöß Please complete Classwork 2 and Classwork 2 to practice using Markdown and to manage your personal website for web communication."
  },
  {
    "objectID": "danl-wk/wk-02.html#recommended-reading",
    "href": "danl-wk/wk-02.html#recommended-reading",
    "title": "Week 2",
    "section": "üìö Recommended Reading",
    "text": "üìö Recommended Reading\n\nCheck the end of slides for the list of references cited in the lecture."
  },
  {
    "objectID": "danl-wk/wk-02.html#discussion",
    "href": "danl-wk/wk-02.html#discussion",
    "title": "Week 2",
    "section": "üí¨ Discussion",
    "text": "üí¨ Discussion\nWelcome to our Week 2 Discussion Board! üëã \nThis space is designed for you to engage with your classmates about the material covered in Week 2.\nWhether you are looking to delve deeper into the content, share insights, or have questions about the content, this is the perfect place for you.\nIf you have any specific questions for Byeong-Hak (@bcdanl) or peer classmate (@GitHub-Username) regarding the Week 1 materials or need clarification on any points, don‚Äôt hesitate to ask here.\nLet‚Äôs collaborate and learn from each other!"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Course Information\n\nInstructor: Byeong-Hak Choe\nEmail: bchoe@geneseo.edu\nPhone: (585) 245-5425\nClass Websites:\n\nGitHub Course Website\nBrightspace Course Shell\n\nOffice: South Hall 227B\nOffice Hours:\n\nMondays and Wednesdays 3:30 P.M. ‚Äì 5:00 P.M.\nBy appointment via email\n\n\n\n\nCourse Description\nThis course aims to provide overview of how one can manipulate, process, clean, crunch, and collect data with hands-on and practical case studies that show you how to solve a broad set of data analysis problems effectively. We will use a computing development environment, Jupyter Notebook, which is a shell and notebook for exploratory computing. This course will cover topics such as (1) loading, cleaning, transforming, merging, and reshaping data, (2) creating informative visualizations, (3) dataset slicing, dicing, and summarizing, and (4) collecting data via web scraping and application programming interfaces (APIs). We will cover these topics to solve real-world data analysis problems with thorough, detailed examples. Computing is done in Python. Throughout the course, students will gain hands-on experience with Python and its data analysis libraries (e.g., pandas, seaborn, requests, selenium), along with practical applications of git and GitHub. We will use Python in a Jupyter Notebook environment, along with practical applications of Git and GitHub.\n\n\nSchool of Business Mission\nThe School of Business at SUNY Geneseo is committed to exceptional business and economics education within the context of a strong liberal arts tradition. The School is distinguished by a uniquely accomplished and dedicated faculty, motivated and capable students, a robust professional development program, and the engaged support of alumni, employers, and business leaders. Students acquire strong quantitative, analytical, and communication skills while preparing for professional success as socially conscious contributors. We strive for teaching excellence, and we recognize that high-quality faculty scholarship and professional activities increase our impact on knowledge, practice, and pedagogy.\n\n\nBachelor of Arts in Data Analytics Program Competency Goals\n\nCompetency Goal 1: Our learners will have strong analytical skills.\nCompetency Goal 2: Our learners will have strong quantitative skills.\nCompetency Goal 3: Our learners will have effective communications skills.\nCompetency Goal 4: Our learners will have a thorough understanding of various functional areas of business.\nCompetency Goal 5: Our learners will have a multidimensional understanding of social responsibility.\n\n\n\nCourse Learning Outcomes\n\nUnderstand methods and attributes of numerous data set objects represented in Python Programming;\nKnow how to perform a multitude of data operations in Python Programming such as grouping, pivoting, and joining;\nKnow how to manipulate, process, and clean all types of data sets (including broken and incomplete) in Python for data analytics applications;\nKnow how to effectively present and visualize resulting data;\nKnow how to effectively collect data;\nUnderstand how to solve broad set of data analytics problems and describe how Python Programming is used strategically and tactically for them.\n\n\n\nCourse Requirements\n\nHomework: 5 assignments\nProject: There will be one project on a personal website.\nExams: 2 midterms and 1 final\nTools:\n\nRStudio Desktop\n\nTerms of Use\n\nAnaconda Distribution\n\nTerms of Service\n\nGoogle Colab\n\nTerms of Service\n\nGitHub\n\nSite Policy\n\nBrightspace\n\nPrivacy Policy\n\nMicrosoft Teams\n\nServices Agreement\n\n\n\n\n\nProject\n\nAgenda: Unifying ESG Metrics with Financial Analysis\n\nDeliverables: Code + write-up published on team websites\n\nGrading based on: data collection, EDA, business/economic analysis, and website usage\n\n\n\nRecommended References\nWe will be drawing material from a wide variety of sources for this course; as such, there is no single, required textbook per se.\n\nPython for Data Analysis ‚Äì Wes McKinney\nPython Programming for Data Science ‚Äì Beuzen\n\nCoding for Economists ‚Äì Turrell\n\nPython for Econometrics in Economics ‚Äì Raters\n\nQuantEcon Data Science\n\nQuarto Guide\n\n\n\nCourse Schedule\n\n\n\n\n\n\n\n\n\nWeek\nDates\nTopic\nNotes\n\n\n\n\n1\nAug 25‚Äì29\nInstalling Tools\n\n\n\n2\nSep 2‚Äì5\nPython Basics (Part 1)\nLabor Day (Sep 1)\n\n\n3\nSep 8‚Äì12\nPython Basics (Part 2)\nHW 1\n\n\n4\nSep 15‚Äì19\nDataFrame operations with pandas (Part 1)\n\n\n\n5\nSep 22‚Äì26\nDataFrame operations with pandas (Part 2)\n\n\n\n6\nSep 29‚ÄìOct 3\nDataFrame operations with pandas (Part 3)\nHW 2\n\n\n7\nOct 6‚Äì10\nDataFrame operations with pandas (Part 4)\nMidterm Exam I\n\n\n8\nOct 15‚Äì17\nWeb scraping with pandas.read_html()\nFall Break (Oct 13‚Äì14)\n\n\n9\nOct 20‚Äì24\nWeb scraping with Selenium (Part 1)\n\n\n\n10\nOct 27‚Äì31\nWeb scraping with Selenium (Part 2)\nHW 3\n\n\n11\nNov 3‚Äì7\nWeb scraping with Selenium (Part 3)\n\n\n\n12\nNov 10‚Äì14\nData Collection with APIs (Part 1)\nHW 4\n\n\n13\nNov 17‚Äì21\nData Collection with APIs (Part 2)\nMidterm Exam II\n\n\n14\nNov 24‚Äì25\nDataFrame Group operations (Part 2)\nThanksgiving Break (Nov 26‚Äì28)\n\n\n15\nDec 1‚Äì5\nDataFrame Group operations (Part 3)\n\n\n\n16\nDec 8\nDataFrame Group operations (Part 4)\nHW 5\n\n\n\n\nExam Schedule\n\nMidterm Exam 1: during class time in the week 7 (Oct 6‚Äì10)\nMidterm Exam 2: during class time in the week 13 (Nov 17‚Äì21)\nFinal Exam: To be determined  \n\n\n\n\nAttendance\nStudents are allowed up to four absences without penalty. Additional absences may affect your grade unless they are formally excused. If you must miss class for a standard excused reason (e.g., illness, family emergency, transportation issues), please notify me at bchoe@geneseo.edu so the absence can be recorded appropriately.\nRegular attendance is expected, as discussions, activities, and projects are central to your learning. If you anticipate challenges that may affect your attendance, please reach out‚ÄîI am happy to work with you to help you stay on track.\n\n\nGrading\n\nTotal Percentage Grade\n\nAttendance: 5%\n\nHomework: 20% (single lowest homework score dropped)\n\nProject: 25%\n\nExams: 50%\n\n\n\\[\n\\begin{align}\n\\quad\\\\\n&\\text{(Total Percentage Score)} \\\\\n= &\\quad\\; 0.05 \\times \\text{(Attendance)} \\\\\n&+ 0.05 \\times \\text{(Quiz \\& Participation)}\\\\\n&+ 0.20 \\times \\text{(Homework)}\\\\\n&+ 0.20 \\times \\text{(Project)}\\\\\n&+ 0.50 \\times \\text{(Exams)}\n\\end{align}\n\\]\n\nExam Score Calculations\n\n\\[\n\\begin{align}\n&\\quad(\\text{Midterm Exam Score})\\\\\n&= \\max\\left\\{0.50 \\times \\text{(Midterm 1 Score)} + 0.50 \\times \\text{(Midterm 2 Score)},\\right.\\\\\n&\\qquad\\quad\\;\\;\\,\\left.0.33 \\times \\text{(Midterm 1 Score)} + 0.67 \\times \\text{(Midterm 2 Score)}\\right\\}.\n\\end{align}\n\\]\n\nThe Midterm Exam Score will be the higher of the following two calculations:\n\nThe simple average of Midterm Exam 1 and Midterm Exam 2\nThe weighted average, with one-third weight on Midterm Exam 1 and two-thirds weight on Midterm Exam 2\n\n\n\\[\n\\begin{align}\n&\\quad(\\text{Total Exam Score})\\\\\n&= \\max\\left\\{0.50 \\times \\text{(Midterm Exam Score)} + 0.50 \\times \\text{(Final Exam Score)},\\right.\\\\\n&\\qquad\\quad\\;\\;\\,\\left.0.25 \\times \\text{(Midterm Exam Score)} + 0.75 \\times \\text{(Final Exam Score)}\\right\\}.\n\\end{align}\n\\]\n\nThe Total Exam Score will be the higher of the following two calculations:\n\nThe simple average of Midterm Exam and Final Exam\nThe weighted average, with one-fourth weight on Midterm Exam and three-forth weight on Final Exam.\n\nLetter Grade Scale\nTotal percentage scores are converted to letter grades according to the following ranges:\n\n\\[\n\\begin{align}\n100 &‚â• A ‚â• 93 &gt; A‚àí ‚â• 90\\\\\n90 &&gt; B+ ‚â• 87 &gt; B ‚â• 83 &gt; B‚àí ‚â• 80\\\\\n80 &&gt; C+ ‚â• 77 &gt; C ‚â• 73 &gt; C‚àí ‚â• 70\\\\\n70 &&gt; D ‚â• 60 &gt; E\n\\end{align}\n\\]\n\n\nPolicies\n\nMake-up Exams\nMake-up exams will not be given unless you have either a medically verified excuse or an absence excused by the University. For religious obligations, notify the instructor by email at least two weeks in advance to set an alternative time. A missed exam without an excused absence earns a grade of zero.\n\n\nArtificial Intelligence (AI)\nUnless AI tools are explicitly permitted for homework or in-class quizzes, you must complete your work independently. Using tools like ChatGPT for any aspect of coursework is a form of academic dishonesty and undermines the development of your own skills. If you have questions, please ask.\n\n\n\n\n\n\nüìù If you use AI for a particular assignment and/or project, you must also:\n\nüìù You must document which AI platforms and tools you used.\nüì§ You must include your prompts and AI outputs with your assignment submission.\nüß† You must include a reflection on your AI usage and learning process.\n\n\n\n\nAcademic Integrity and Plagiarism\nAll homework assignments and exams must be your original work. Academic dishonesty will not be tolerated. Examples include:\n\nRepresenting the work, thoughts, or ideas of another person as your own\n\nAllowing others to represent your work, thoughts, or ideas as theirs\n\nBeing complicit in academic dishonesty by suspecting or knowing of it and not taking action\n\nSee: Academic Dishonesty Policy and Procedures and Plagiarism Tutorial Brightspace Link\n\n\n\n\nAccessibility\nSUNY Geneseo is dedicated to providing an equitable and inclusive educational experience for all students. The Office of Accessibility (OAS) will coordinate reasonable accommodations for persons with disabilities to ensure equal access to academic programs, activities, and services offered by SUNY Geneseo.\nStudents with approved accommodations may submit a semester request to renew their academic accommodations. More information on the process for requesting academic accommodations is on the OAS website.\nQuestions? Contact the OAS by email, phone, or in-person:\nOffice of Accessibility Services\nErwin Hall 22\n585-245-5112\naccess@geneseo.edu\n\n\nPublic Health and Class Attendance\nIf you are experiencing symptoms associated with COVID on a day that class meets in-person, do not attend. Communicate proactively about absences and contact the Dean of Students if you expect to be out for an extended period.\n\n\nReligious Observations and Class Attendance\nNew York State Education Law 224-a stipulates that ‚Äúany student in an institution of higher education who is unable, because of [their] religious beliefs, to attend classes on a particular day or days shall, because of such absence on the particular day or days, be excused from any examination or any study or work requirements‚Äù (see General Classroom Policies for more information). SUNY Geneseo has a commitment to inclusion and belonging, and I want to stress my respect for the diverse identities and faith traditions of students in my class. If you anticipate an absence due to religious observations, please contact me as soon as possible in advance to discuss your needs and arrange make up plans. The New York State Department of Civil Service maintains a calendar of major religious observations.\n\n\nMilitary Obligations and Class Attendance\nFederal and New York State law requires institutions of higher education to provide an excused leave of absence from classes without penalty to students enrolled in the National Guard or armed forces reserves who are called to active duty. If you are called to active military duty and need to miss classes, please let me know and consult as soon as possible with the Dean of Students.\n\n\nBias-Related Incidents\n\n‚ÄúWe are here to listen, to learn, to teach, to debate, to change, to grow. We should all be safe to pursue these goals at SUNY Geneseo while being who we are. Together, we commit ourselves to pluralism, cultivating a community that respects difference and promotes a sense of inclusion and belonging.‚Äù\n\nAs this excerpt from our Community Commitment to Diversity, Equity, and Inclusion states, here at SUNY Geneseo, we want to provide a space where everyone feels welcome to learn and grow in their identities as well as in their role as students, faculty, and staff. If in the unfortunate instance you witness or experience an incident of bias, we encourage you to reach out to the Chief Diversity Officer, Director of Multicultural Affairs, and/or our University Police Department. You may also choose to report it through the bias-related incident reporting form. In trying to create an environment that facilitates growth through diverse thoughts and ideas, reporting incidents of bias - including threats, vandalism, and microaggressive behaviors - can help bring a better understanding of our campus climate as well as provide opportunities for learning and restoring harm.\n\n\n\nPersonal Health, Well-being, and Basic Needs\n\nWell-Being\nPrioritizing well-being can support the achievement of academic goals and alleviate stress. Eating nutritious foods, getting enough sleep, exercising, avoiding drugs and alcohol, maintaining healthy relationships, and building in time to relax all help promote a healthy lifestyle and general well-being. Your health and wellbeing are foundational to your ability to learn, and if you find that you are feeling unwell (physically or mentally) and it is impacting your ability to complete your coursework, please reach out. In a similar way, I will occasionally ask for some patience and flexibility on your part.\nIf I am slow responding to an email, if I take some time to grade an assignment, or if I am a bit late posting course materials, please be patient (and feel free to send me a ‚Äònudge‚Äô; I will not be offended). You will never suffer any disadvantage in the course because of delays on my part. Remember that we are all in this together.\n\n\nBasic Needs Statement\nIn order to foster a sense of belonging and connection, a state of financial, mental, emotional and physical stability must be achieved. If you are facing food insecurity, displacement, an emergency, crisis, or health-related or medical expense, you are not alone. Concerns about academic performance, health situations, family health and wellness (including the loss of a loved one), interpersonal relationships and commitments, and other factors can contribute to stress. Students are strongly encouraged to communicate their needs to faculty and staff and seek support if they are experiencing unmanageable stress or are having difficulties with daily functioning. The Dean of Students (585-245-5706) can assist and provide direction to appropriate campus resources. For more information, visit the Dean of Students Office website.\n\n\nMental Health\nAs a student, you may experience a range of challenges that can impact your mental health and thus impact your learning; common examples include increased anxiety, shifts in mood, strained relationships, difficulties related to substance use, trouble concentrating, and lack of motivation, among many others. These experiences may reduce your ability to participate fully in daily activities and affect your academic performance.\nSUNY Geneseo offers free, confidential counseling for students through Student Health and Counseling, and seeking support for your mental health can be key to your success at college. You can learn more about the various mental health services available on campus online. To request a counseling appointment, please complete the online form.\n\n\nGuidelines for Attendance and Public Health\nSUNY Geneseo is a residential liberal arts college where we all learn together in a shared space. This classroom community is vital for engaging in discussions, solving problems, and answering questions together. Learning is an active process, and it requires engagement - on my part and yours. I promise to create an interactive and collaborative classroom space, and in return I expect you to attend and engage in the activities.\nIt‚Äôs possible that some of you may get sick over the course of the semester. Because we want you to be successful and because we value your contribution to the course, we expect you to prioritize attendance. If you are not feeling well and your symptoms do not allow you to attend class, stay home (except to go to the health center), rest, and take care of yourself. You can find more guidelines from the Center for Disease Control for precautions when sick which cover flu, COVID, and other illnesses.\nI expect you to communicate with me directly about your absences. I can support you to keep up with class if you are out for an illness, but I need you to take responsibility for being transparent and clear in letting me know when you are out and why. Although I can work with you on keeping up, you may miss some course content and extended absences may impact your ability to realize your full potential in this class. For extended absences (i.e., more than a couple of days of classes), you should contact the Dean of Students who can assist with reaching out to your faculty.\n\n\nFood Security for SUNY Geneseo Students\nSUNY Geneseo is committed to supporting students who are experiencing food insecurity. If you‚Äôre unfamiliar with the phrase ‚Äúfood insecurity,‚Äù you can learn more at the following link on Feeding America‚Äôs website: Understanding Food Insecurity.\nKnights‚Äô Harvest Pantry, our on-campus food pantry, is a collaborative initiative supported by Campus Auxiliary Services (CAS) and facilitated by trained student volunteers. The program is advised by the Assistant Director of Student Volunteerism and Community Engagement in partnership with the Geneseo Opportunities for Leadership Development (GOLD) program.\nStudents who are in need can confidentially request a bag of food and basic hygiene supplies through our website. These bags typically include non-perishable items and, when available, fresh fruits, vegetables, meat, and dairy products. Pickups take place at the GOLD Leadership Center in MacVittie College Union, Room 114.\nWe are committed to protecting student privacy and promoting dignity, while also working to destigmatize food insecurity on our campus. If Knights‚Äô Harvest Pantry does not fully meet your needs or if you‚Äôd prefer to discuss your situation privately, please reach out to Cheyenne DeMarco, Assistant Director of Student Volunteerism and Community Engagement, at cdemarco@geneseo.edu for a one-on-one consultation.\nPlease note that Knights‚Äô Harvest Pantry is closed during official SUNY breaks, including Fall Break, Winter Intersession, Spring Break, and summer between semesters. During these times, students are encouraged to access the Geneseo-Groveland Emergency Food Pantry, located at 31 Center Street, Geneseo, NY 14454. For updates on pantry hours, events, and additional support opportunities, follow us on Instagram or Facebook: @knightsharvestgeneseo. For questions or support, contact Cheyenne DeMarco at cdemarco@geneseo.edu or (585) 245-5893.\n\n\nEmergency Funding\nThe college has three sources of emergency funding for students experiencing short-term financial crises. The Camiolo Student Emergency Loan Fund (SELF) provides short-term loans to students for situations both temporary and beyond their control. The SELF was established with the expectation that students who use the fund seek to ‚Äúpay it forward‚Äù as soon as they are able by contributing to the fund so other students can be helped, too. While there is not a legal obligation, the donors hope that student loan recipients respect and honor the value of community and helping others in their time of crisis. The One Knight Student Aid Emergency Fund assists Geneseo students who are facing financial emergencies mainly related to the COVID-19 pandemic. The fund offers grants (one-time award) depending on a student‚Äôs documented financial need. For those students expecting a refund from financial aid, a Temple Hill loan of up to $500 can be offered prior to the approved loan dispersal. If you are experiencing financial hardship, please contact the Dean of Students (585-245-5706), who can assist and provide direction to appropriate campus resources.\n\n\n\nSUNY Geneseo‚Äôs Commitments, Mission and Values\nSUNY Geneseo has several core documents that articulate our shared commitments and learning objectives. These include:\n\nSUNY Geneseo Mission, Vision and Values\nCommunity Commitment to Diversity, Equity, and Inclusion\nSustainability as a Core Value\nGeneseo Learning Outcomes for Baccalaureate Education\n\n\n\nDisclaimer\nThe syllabus may be subject to change during the semester. If it is changed, you will be notified via email and Brightspace.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "danl-hw/danl-299-hw-01.html",
    "href": "danl-hw/danl-299-hw-01.html",
    "title": "Homework 1",
    "section": "",
    "text": "Please submit your Jupyter Notebook for Part 2 in Homework 1 to Brightspace with the name below:\n\ndanl-299-hw1-LASTNAME-FIRSTNAME.ipynb\n( e.g., danl-299-hw1-choe-byeonghak.ipynb )\n\nThe due is September 22, 2025, 5:15 P.M.\nPlease send Prof.¬†Choe an email (bchoe@geneseo.edu) if you have any questions."
  },
  {
    "objectID": "danl-hw/danl-299-hw-01.html#question-0",
    "href": "danl-hw/danl-299-hw-01.html#question-0",
    "title": "Homework 1",
    "section": "Question 0",
    "text": "Question 0\nProvide your GitHub username."
  },
  {
    "objectID": "danl-hw/danl-299-hw-01.html#question-1",
    "href": "danl-hw/danl-299-hw-01.html#question-1",
    "title": "Homework 1",
    "section": "Question 1",
    "text": "Question 1\n\nQ1a\n\nCreate a list of integers from 1 to 10.\nAppend the number 11 to the list and remove the number 5.\n\n\n\n\nQ1b\n\nConsider the following dictionary of three employees and their salaries:\n\ndict_salaries = {'Alice': 50000, 'Bob': 60000, 'Charlie': 70000}\n\nAdd a new employee 'Dana' with a salary of 65000.\nUpdate 'Alice'‚Äôs salary to 55000.\nPrint all employee names and their salaries."
  },
  {
    "objectID": "danl-hw/danl-299-hw-01.html#question-2",
    "href": "danl-hw/danl-299-hw-01.html#question-2",
    "title": "Homework 1",
    "section": "Question 2",
    "text": "Question 2\n\nQ2a\n\nAssign a variable salary to 75000.\nUse an if-elif-else statement to print:\n\n'Low' if salary is less than 50,000\n'Medium' if salary is between 50,000 and 99,999\n'High' if salary is 100,000 or more\n\n\n\n\n\n\nQ2b\n\nAssign two variables, role and salary, to 'Manager' and 85000, respectively.\nUse nested if-else statements to print:\n\n'Eligible for bonus' if the role is 'Manager' and the salary is greater than 80,000.\n'Eligible for raise' if the role is 'Analyst' and the salary is less than 60,000.\n'No action needed' for all other cases."
  },
  {
    "objectID": "danl-hw/danl-299-hw-01.html#question-3",
    "href": "danl-hw/danl-299-hw-01.html#question-3",
    "title": "Homework 1",
    "section": "Question 3",
    "text": "Question 3\n\nQ3a\n\nConsider the following list of salaries:\n\nlist_salaries = [45000, 60000, 75000, 120000, 30000]\n\nCalculate the average salary.\nUse a for loop to print whether each salary is 'Above Average' or 'Below Average'.\n\n\n\n\n\nQ3b\n\nStart with a salary of 50000.\nUse a while loop to increase the salary by 5000 each year until it exceeds 80000.\nPrint the salary after each increment.\n\n\n\n\n\nQ3c\n\nConsider the following dictionary of employee salaries:\n\nsalaries = {'Alice': 50000, 'Bob': 60000, 'Charlie': 70000, 'Dana': 45000}\n\nUse a for loop to print the names of employees who earn more than 55000.\n\n\n\n\n\nQ3d\ndata_list = [42, 3.14, 'Data Analytics', True, None, [1, 2, 3], {'key': 'value'}, (4, 5)]\n\nGiven the list above, print the data type of each element using the type() function in a for loop. In the loop:\n\nConvert the integer 42 to a string.\nConvert the float 3.14 to a string, then back to a float.\nConvert the boolean True to an integer."
  },
  {
    "objectID": "danl-hw/danl-299-hw-01.html#question-4",
    "href": "danl-hw/danl-299-hw-01.html#question-4",
    "title": "Homework 1",
    "section": "Question 4",
    "text": "Question 4\n\nQ4a\nConsider the variables a and b:\na = 10\nb = 0\n\nUse a try-except block to print the result of a / b.\n\nIf there is an error, print 'Cannot divide by zero!'.\n\n\n\n\n\n\nQ4b\n\nConsider the following dictionary of salaries with some missing (None) values:\n\nsalaries = {'Alice': 50000, 'Bob': None, 'Charlie': 70000, 'Dana': None, 'Eve': 80000}\n\nUse a for loop with a try-except block to calculate the total of non-missing salaries."
  },
  {
    "objectID": "danl-hw/danl-299-hw-01.html#question-5",
    "href": "danl-hw/danl-299-hw-01.html#question-5",
    "title": "Homework 1",
    "section": "Question 5",
    "text": "Question 5\n\nImport the math library and calculate the square root of 81 using the sqrt() function provided by the math library."
  }
]